{"file_contents":{"README.md":{"content":"# Astrologer API\n\nA Astrologer API é um serviço RESTful que fornece cálculos astrológicos extensivos, projetado para integração perfeita em projetos. Oferece um conjunto de mapas astrológicos e dados, tornando-se uma ferramenta inestimável tanto para desenvolvedores quanto para entusiastas da astrologia.\n\nAqui está um exemplo de mapa natal gerado usando a Astrologer API:\n\n![Mapa de John Lennon](https://raw.githubusercontent.com/g-battaglia/kerykeion/refs/heads/master/tests/charts/svg/John%20Lennon%20-%20Dark%20Theme%20-%20Natal%20Chart.svg)\n\n\n## Resumo Rápido dos Endpoints\n\n\n| Endpoint                          | Método | Descrição |\n|-----------------------------------|--------|-----------|\n| `/api/v4/birth-chart`            | POST   | Gera um mapa natal completo como string SVG, incluindo posições planetárias e aspectos. |\n| `/api/v4/synastry-chart`         | POST   | Cria um mapa de sinastria comparando dois sujeitos, exibindo suas interações e compatibilidade, junto com uma representação SVG. |\n| `/api/v4/transit-chart`          | POST   | Gera um mapa de trânsitos para um sujeito, mostrando influências planetárias atuais, com representação visual SVG. |\n| `/api/v4/composite-chart`        | POST   | Calcula um mapa composto para dois sujeitos usando o método do ponto médio, incluindo aspectos e representação visual SVG. |\n| `/api/v4/relationship-score`     | POST   | Calcula uma pontuação de compatibilidade (0-44) usando o método Ciro Discepolo para avaliar o potencial do relacionamento. |\n| `/api/v4/natal-aspects-data`     | POST   | Fornece dados detalhados do mapa natal e aspectos sem o mapa visual. |\n| `/api/v4/synastry-aspects-data`  | POST   | Retorna dados relacionados à sinastria e aspectos entre dois sujeitos, sem mapa SVG. |\n| `/api/v4/transit-aspects-data`   | POST   | Oferece dados de mapa de trânsitos e aspectos para um sujeito, sem representação visual SVG. |\n| `/api/v4/composite-aspects-data` | POST   | Entrega dados de mapa composto e aspectos sem gerar um mapa SVG. |\n| `/api/v4/birth-data`             | POST   | Retorna dados essenciais do mapa natal sem aspectos ou representação visual. |\n| `/api/v4/now`                    | GET    | Recupera dados do mapa natal para o horário UTC atual, excluindo aspectos e o mapa visual. |\n\n## Assinatura\n\nPara acessar a Astrologer API, assine aqui:\n\n[Assinar a Astrologer API](https://rapidapi.com/gbattaglia/api/astrologer/pricing)\n\n## Documentação\n\nExplore a documentação abrangente da API:\n\n- [Documentação Swagger](https://www.kerykeion.net/astrologer-api-swagger/): Documentação interativa com informações detalhadas sobre todos os endpoints e parâmetros.\n\n- [Documentação Redoc](https://www.kerykeion.net/astrologer-api-redoc/): Uma interface de documentação limpa e amigável para fácil referência.\n\n- [Especificação OpenAPI](https://raw.githubusercontent.com/g-battaglia/Astrologer-API/master/openapi.json): A especificação OpenAPI completa para a Astrologer API.\n\n## Começando\n\nPara começar a usar a Astrologer API, inclua sua chave API nos cabeçalhos da requisição. Esta chave é essencial para autenticar suas requisições e garantir que sejam processadas corretamente.\n\n### Exemplo de Cabeçalhos de Requisição\n\nCertifique-se de que suas requisições API incluam os seguintes cabeçalhos:\n\n```javascript\nheaders: {\n    'X-RapidAPI-Host': 'astrologer.p.rapidapi.com',\n    'X-RapidAPI-Key': 'SUA_CHAVE_API'\n    }\n```\n\nSubstitua `SUA_CHAVE_API` pela sua chave API real obtida durante o registro.\n\n\n## Recursos\n\n### Mapas\n\nA Astrologer API fornece vários endpoints `*-chart` com opções personalizáveis:\n\n#### Idiomas\n\nVocê pode especificar o parâmetro `language` para selecionar o idioma do seu mapa. As opções disponíveis são:\n\n- `EN`: Inglês (padrão)\n- `FR`: Francês\n- `PT`: Português\n- `ES`: Espanhol\n- `TR`: Turco\n- `RU`: Russo\n- `IT`: Italiano\n- `CN`: Chinês\n- `DE`: Alemão\n- `HI`: Hindi\n\nExemplo de requisição API:\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"longitude\": 0,\n        \"latitude\": 51.4825766,\n        \"city\": \"London\",\n        \"nation\": \"GB\",\n        \"timezone\": \"Europe/London\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"tropic\"\n    },\n    \"language\": \"PT\"\n}\n```\n\n#### Temas\n\nPersonalize a aparência dos seus mapas usando o parâmetro `theme`. Os temas disponíveis são:\n\nTemas disponíveis:\n\n- `light`: Tema claro moderno com cores suaves\n\n![Exemplo de Mapa John Lennon](https://raw.githubusercontent.com/g-battaglia/kerykeion/refs/heads/master/tests/charts/svg/John%20Lennon%20-%20Light%20Theme%20-%20Natal%20Chart.svg)\n\n- `dark`: Tema escuro moderno\n  \n![Exemplo de Mapa John Lennon](https://raw.githubusercontent.com/g-battaglia/kerykeion/refs/heads/master/tests/charts/svg/John%20Lennon%20-%20Dark%20Theme%20-%20Natal%20Chart.svg)\n\n- `dark-high-contrast`: Tema escuro de alto contraste\n\n![Exemplo de Mapa John Lennon](https://raw.githubusercontent.com/g-battaglia/kerykeion/refs/heads/master/tests/charts/svg/John%20Lennon%20-%20Dark%20High%20Contrast%20Theme%20-%20Natal%20Chart.svg)\n\n- `classic`: Tema colorido tradicional\n\n![Exemplo de Mapa Albert Einstein](https://raw.githubusercontent.com/g-battaglia/kerykeion/refs/heads/master/tests/charts/svg/Albert%20Einstein%20-%20Natal%20Chart.svg)\n\nExemplo de requisição API:\n\n```json\n{\n    \"subject\": { /* ... */ },\n    \"theme\": \"dark\"\n}\n```\n\n\n### Tipos de Zodíaco\n\nVocê pode escolher entre os zodíacos Sideral e Tropical usando o parâmetro `zodiac_type` na chave `subject` da maioria dos endpoints.\n\n- `tropic`: Zodíaco Tropical (padrão)\n- `sidereal`: Zodíaco Sideral\n\nSe você selecionar `sidereal`, deve também especificar o parâmetro `sidereal_mode`, que oferece vários ayanamsha (modos de cálculo zodiacal):\n\n- `FAGAN_BRADLEY`\n- `LAHIRI` (padrão para astrologia védica)\n- `DELUCE`\n- `RAMAN`\n- `USHASHASHI`\n- `KRISHNAMURTI`\n- `DJWHAL_KHUL`\n- `YUKTESHWAR`\n- `JN_BHASIN`\n- `BABYL_KUGLER1`\n- `BABYL_KUGLER2`\n- `BABYL_KUGLER3`\n- `BABYL_HUBER`\n- `BABYL_ETPSC`\n- `ALDEBARAN_15TAU`\n- `HIPPARCHOS`\n- `SASSANIAN`\n- `J2000`\n- `J1900`\n- `B1950`\n\nOs ayanamshas mais comumente usados são `FAGAN_BRADLEY` e `LAHIRI`.\n\nExemplo de requisição API:\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"longitude\": 0,\n        \"latitude\": 51.4825766,\n        \"city\": \"London\",\n        \"nation\": \"GB\",\n        \"timezone\": \"Europe/London\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"sidereal\",\n        \"sidereal_mode\": \"FAGAN_BRADLEY\"\n    }\n}\n```\n\n### Sistemas de Casas\n\nO parâmetro `house_system` define o método usado para dividir a esfera celestial em doze casas. Aqui estão as opções disponíveis:\n\n- **A**: Equais\n- **B**: Alcabitius\n- **C**: Campanus\n- **D**: Equais (MC)\n- **F**: Carter poli-equ.\n- **H**: Horizonte/Azimute\n- **I**: Sunshine\n- **i**: Sunshine/Alt.\n- **K**: Koch\n- **L**: Pullen SD\n- **M**: Morinus\n- **N**: Equais/1=Áries\n- **O**: Porphyry\n- **P**: Placidus\n- **Q**: Pullen SR\n- **R**: Regiomontanus\n- **S**: Sripati\n- **T**: Polich/Page\n- **U**: Krusinski-Pisa-Goelzer\n- **V**: Equais/Vehlow\n- **W**: Equais/Signos Inteiros\n- **X**: Sistema de rotação axial/Casas meridianas\n- **Y**: Casas APC\n\nNormalmente, o sistema de casas padrão usado é Placidus (P).\n\nExemplo de requisição API:\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"longitude\": 0,\n        \"latitude\": 51.4825766,\n        \"city\": \"London\",\n        \"nation\": \"GB\",\n        \"timezone\": \"Europe/London\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"tropic\",\n        \"house_system\": \"A\"\n    }\n}\n```\n\nIsso permite especificar o sistema de casas desejado para calcular e exibir as posições dos corpos celestiais.\n\n### Tipos de Perspectiva\n\nO parâmetro `perspective` define o ponto de vista a partir do qual as posições dos corpos celestiais são calculadas. Aqui estão as opções disponíveis:\n\n- \"Apparent Geocentric\": Centrado na Terra e mostra as posições aparentes dos corpos celestiais como visto da Terra. Esta é a mais comumente usada e a perspectiva padrão.\n- \"Heliocentric\": Centrado no Sol.\n- \"Topocentric\": Esta perspectiva é baseada na localização específica do observador na superfície da Terra.\n- \"True Geocentric\": Esta perspectiva também é centrada na Terra, mas mostra as posições verdadeiras dos corpos celestiais sem as mudanças aparentes causadas pela atmosfera terrestre.\n  \nNormalmente, a perspectiva padrão usada é \"Apparent Geocentric\".\n\nExemplo de uso em uma requisição API:\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"longitude\": 0,\n        \"latitude\": 51.4825766,\n        \"city\": \"London\",\n        \"nation\": \"GB\",\n        \"timezone\": \"Europe/London\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"tropic\",\n        \"perspective\": \"Heliocentric\"\n    }\n}\n```\n\nIsso permite especificar a perspectiva desejada para calcular e exibir as posições dos corpos celestiais.\n\n### Mapas Apenas com Roda\n\nPara gerar mapas que contenham apenas a roda zodiacal sem informações textuais, você pode usar a opção `wheel_only` em sua chamada API. Quando esta opção está definida como `True`, apenas a roda zodiacal será retornada.\n\nExemplo de requisição API:\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"longitude\": 0,\n        \"latitude\": 51.4825766,\n        \"city\": \"London\",\n        \"nation\": \"GB\",\n        \"timezone\": \"Europe/London\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"tropic\"\n    },\n    \"wheel_only\": true\n}\n```\n\nIsso pode ser útil para criar representações visuais limpas e simples do zodíaco sem qualquer informação adicional.\n\n## Fusos Horários\n\nCálculos astrológicos precisos requerem o fuso horário correto. Consulte o seguinte link para uma lista completa de fusos horários:\n\n[Lista de Fusos Horários do Banco de Dados TZ](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)\n\n#### Pontos Ativos e Aspectos\n\nPara todos os endpoints de Mapas (Mapa Natal, Mapa de Trânsitos), \nDados de Aspectos Natais e Dados de Aspectos de Sinastria, você pode personalizar quais pontos celestiais incluir e quais aspectos calcular usando os parâmetros `active_points` e `active_aspects`.\n\nExemplo de requisição API:\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"longitude\": 0,\n        \"latitude\": 51.4825766,\n        \"city\": \"London\",\n        \"nation\": \"GB\",\n        \"timezone\": \"Europe/London\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"tropic\"\n    },\n    \"active_points\": [\n        \"Sun\",\n        \"Moon\",\n        \"Mercury\",\n        \"Venus\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n        \"Pluto\",\n        \"Mean_Node\",\n        \"Chiron\",\n        \"Ascendant\",\n        \"Medium_Coeli\",\n        \"Mean_Lilith\",\n        \"Mean_South_Node\"\n    ],\n    \"active_aspects\": [\n        {\n            \"name\": \"conjunction\",\n            \"orb\": 10\n        },\n        {\n            \"name\": \"opposition\",\n            \"orb\": 10\n        },\n        {\n            \"name\": \"trine\",\n            \"orb\": 8\n        },\n        {\n            \"name\": \"sextile\",\n            \"orb\": 6\n        },\n        {\n            \"name\": \"square\",\n            \"orb\": 5\n        },\n        {\n            \"name\": \"quintile\",\n            \"orb\": 1\n        }\n    ]\n}\n```\n\nEsses parâmetros permitem:\n- Especificar quais pontos celestiais incluir no mapa e cálculos\n- Definir quais aspectos calcular junto com seus orbes (o grau de desvio permitido do aspecto exato)\n\n## Coordenadas Automáticas\n\nÉ possível usar coordenadas automáticas se você não quiser implementar um método diferente para calcular latitude, longitude e fuso horário.\n\nPara fazer isso, você deve passar o parâmetro `geonames_username` dentro do objeto `subject` em cada requisição que contenha o objeto `subject`.\n\n**Lógica**\n\n- Se `geonames_username` estiver presente, os parâmetros `longitude`, `latitude` e `timezone` são automaticamente ignorados.\n- Se **NÃO** estiver presente, todos os três parâmetros (`longitude`, `latitude` e `timezone`) devem ser especificados.\n\n**Recomendação**\n\nÉ recomendado usar coordenadas reais diretamente para maior precisão.\n\n**Obtendo um Nome de Usuário Geonames**\n\nSe você quiser calcular coordenadas automaticamente, precisa obter um `username` para o serviço Geonames Timezone. O serviço é gratuito para até **10.000 requisições por dia**.\nVocê pode obter um nome de usuário Geonames registrando-se em <a href=\"http://www.geonames.org/login\" target=\"_blank\">Geonames</a>.\n\n**Exemplo**\n\n```json\n{\n    \"subject\": {\n        \"year\": 1980,\n        \"month\": 12,\n        \"day\": 12,\n        \"hour\": 12,\n        \"minute\": 12,\n        \"city\": \"Jamaica, New York\",\n        \"nation\": \"US\",\n        \"name\": \"John Doe\",\n        \"zodiac_type\": \"tropic\",\n        \"geonames_username\": \"SEU_USUARIO_GEONAMES\"\n    }\n}\n```\n\n## Direitos Autorais e Licença\n\nA Astrologer API é Software Livre/Livre de Código Aberto com licença AGPLv3. Todos os termos e condições da licença AGPLv3 se aplicam à Astrologer API.\nVocê pode revisar e contribuir para o código fonte através dos repositórios oficiais:\n\n- [Astrologer API V4](https://github.com/g-battaglia/v4.astrologer-api)\n\nA Astrologer API é desenvolvida por Giacomo Battaglia e é baseada em Kerykeion, uma biblioteca Python para cálculos astrológicos do mesmo autor. As ferramentas subjacentes são construídas sobre o Swiss Ephemeris.\n\nComo é um serviço de API externo, integrar dados e mapas recuperados via API não impõe restrições de licenciamento, permitindo uso em projetos com licenças de código fechado.\n\n## Uso Comercial\n\nA Astrologer API pode ser usada livremente em aplicações comerciais de código aberto e fechado sem restrições, pois funciona como um serviço externo.\n\nPara conformidade total, recomendamos adicionar esta declaração em seus Termos e Condições ou em outro lugar em seu site/aplicativo:\n\n---\nDados astrológicos e mapas neste site são gerados usando [AstrologerAPI](https://rapidapi.com/gbattaglia/api/astrologer), um serviço de terceiros de código aberto licenciado sob AGPL v3. Código fonte:\n- [Github da Astrologer API](https://github.com/g-battaglia/Astrologer-API)\n---\n\nIsso garante transparência total e conformidade completa de licenciamento, não deixando margem para dúvidas.\n\n\n## Contato e Suporte  \n\nPrecisa de ajuda ou tem feedback? Entre em contato conosco:\n[kerykeion.astrology@gmail.com](mailto:kerykeion.astrology@gmail.com)","size_bytes":15029},"dump_schema.py":{"content":"from app.main import app\nimport json\n\n# with open(\"openapi.json\", \"w\") as outfile:\n#     json.dump(app.openapi(), outfile)\n\ndef dump_schema(output_file_path):\n    BASE_URL = \"https://astrologer.p.rapidapi.com/\"\n    RAPIDAPI_HOST = \"astrologer.p.rapidapi.com\" \n    openapi_data = app.openapi()\n\n    # Define the rapidapi authentication headers\n    rapidapi_auth = {\n        \"type\": \"apiKey\",\n        \"name\": \"x-rapidapi-key\",\n        \"in\": \"header\"\n    }\n\n    # Add RapidAPI authentication to the securityDefinitions or components/securitySchemes\n    if 'swagger' in openapi_data:  # Swagger 2.0\n        openapi_data.setdefault('securityDefinitions', {})\n        openapi_data['securityDefinitions']['RapidAPIKey'] = rapidapi_auth\n    elif 'openapi' in openapi_data:  # OpenAPI 3.0+\n        openapi_data.setdefault('components', {}).setdefault('securitySchemes', {})\n        openapi_data['components']['securitySchemes']['RapidAPIKey'] = rapidapi_auth\n    else:\n        raise ValueError(\"Unrecognized OpenAPI version\")\n\n    # Apply the security scheme globally or to individual paths\n    security_requirement = [{\"RapidAPIKey\": []}]\n    \n    # Add the security requirement to the paths\n    if 'swagger' in openapi_data:  # Swagger 2.0\n        for path in openapi_data.get('paths', {}).values():\n            for method in path.values():\n                method['security'] = security_requirement\n    elif 'openapi' in openapi_data:  # OpenAPI 3.0+\n        for path in openapi_data.get('paths', {}).values():\n            for method in path.values():\n                if isinstance(method, dict):  # Ensure we're modifying the correct level\n                    method['security'] = security_requirement\n\n    # Add the headers and hardcoded host/base URL to each path's operation\n    for path, methods in openapi_data.get('paths', {}).items():\n        for method, details in methods.items():\n            if isinstance(details, dict):  # Ensure we're modifying the correct level\n                details.setdefault('parameters', [])\n                \n                # Add x-rapidapi-key header\n                details['parameters'].append({\n                    \"name\": \"x-rapidapi-key\",\n                    \"in\": \"header\",\n                    \"required\": True,\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"example\": \"<YOUR_RAPIDAPI_KEY>\"\n                    }\n                })\n                \n                # Hardcode x-rapidapi-host header\n                details['parameters'].append({\n                    \"name\": \"x-rapidapi-host\",\n                    \"in\": \"header\",\n                    \"required\": True,\n                    \"schema\": {\n                        \"type\": \"string\",\n                        \"example\": RAPIDAPI_HOST\n                    }\n                })\n\n                # Prepend base URL to all endpoints\n                if 'servers' not in openapi_data:\n                    openapi_data['servers'] = [{\"url\": BASE_URL}]\n                else:\n                    for server in openapi_data['servers']:\n                        server['url'] = BASE_URL\n\n    # Save the modified OpenAPI JSON file\n    with open(output_file_path, 'w') as file:\n        json.dump(openapi_data, file, indent=2)\n\n\nif __name__ == \"__main__\":\n    # https://editor-next.swagger.io/\n    dump_schema(\"openapi.json\")\n    print(\"OpenAPI JSON file generated successfully! Check it here: https://editor-next.swagger.io/\")","size_bytes":3458},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"fastapi>=0.116.2\",\n    \"kerykeion>=4.26.3\",\n    \"pydantic>=2.11.9\",\n    \"pydantic-settings>=2.10.1\",\n    \"pytz>=2024.2\",\n    \"scour>=0.38.2\",\n    \"starlette>=0.48.0\",\n    \"types-pytz>=2025.2.0.20250809\",\n    \"typing-extensions>=4.15.0\",\n    \"uvicorn>=0.35.0\",\n]\n","size_bytes":409},"replit.md":{"content":"# Astrologer API\n\n## Overview\nThe Astrologer API is a RESTful service providing extensive astrology calculations, designed for seamless integration into projects. Built with FastAPI and Kerykeion library, it offers a rich set of astrological charts and data.\n\n## Current State\n- **Status**: ✅ Fully configured and running\n- **Environment**: Development mode with debug enabled\n- **Port**: 5000 (configured for Replit environment)\n- **Language**: Python 3.11\n- **Framework**: FastAPI with Uvicorn server\n\n## Recent Changes\n- 2025-09-19: Initial setup from GitHub import\n- Installed Python 3.11 and all dependencies from Pipfile\n- Configured development environment with ENV_TYPE=dev\n- Created complete UX/UI interface in Portuguese Brazilian\n- Integrated frontend with API using CORS and static file serving\n- Set up workflow to run FastAPI server + frontend on port 5000\n- Configured deployment for autoscale target\n- All endpoints and interface tested and working correctly\n\n## Project Architecture\n- **Framework**: FastAPI with Uvicorn ASGI server\n- **Main dependencies**: kerykeion (astrology calculations), pydantic (data validation)\n- **Structure**:\n  - `app/main.py` - FastAPI application entry point\n  - `app/routers/` - API route handlers\n  - `app/config/` - Configuration files (dev/prod)\n  - `app/types/` - Request/response models\n  - `app/utils/` - Utility functions\n  - `app/middleware/` - Custom middleware\n\n## Key Features\n- **Web Interface**: Modern, responsive UI in Portuguese Brazilian\n- **Birth chart generation**: Complete SVG charts with planetary data\n- **Interactive forms**: User-friendly data input with validation\n- **Real-time generation**: Instant chart creation and display\n- **Multiple themes**: Light, dark, and classic chart themes\n- **API Integration**: Seamless frontend-backend communication\n- **Responsive design**: Works on desktop and mobile devices\n- **RESTful API**: Complete backend API with comprehensive documentation\n\n## API Endpoints\n- `/` - Interface web frontend\n- `/api/v4/status` - Status da API\n- `/api/v4/health` - Health check\n- `/api/v4/now` - Current astrological data\n- `/api/v4/birth-chart` - Generate birth charts\n- `/api/v4/synastry-chart` - Relationship compatibility charts\n- `/api/v4/transit-chart` - Current planetary influences\n- `/docs` - Interactive API documentation\n- `/redoc` - Alternative documentation format\n\n## Configuration\n- Development: Uses config.dev.toml with debug enabled\n- Production: Uses config.prod.toml with security middleware\n- Environment variables: ENV_TYPE controls configuration loading\n- Optional: RAPID_API_SECRET_KEY, GEONAMES_USERNAME for enhanced features\n\n## Deployment\n- Configured for Replit autoscale deployment\n- Production-ready with uvicorn server\n- Port 5000 binding for Replit environment compatibility","size_bytes":2809},"app/__init__.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n","size_bytes":70},"app/main.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n\nimport logging\nimport logging.config\n\nfrom fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom fastapi.responses import FileResponse\n\nfrom .routers import main_router\nfrom .config.settings import settings\nfrom .middleware.secret_key_checker_middleware import SecretKeyCheckerMiddleware\n\n\nlogging.config.dictConfig(settings.LOGGING_CONFIG)\napp = FastAPI(\n    debug=settings.debug,\n    docs_url=settings.docs_url,\n    redoc_url=settings.redoc_url,\n    title=\"Astrologer API\",\n    version=\"4.0.0\",\n    summary=\"Astrology Made Easy\",\n    description=\"The Astrologer API is a RESTful service providing extensive astrology calculations, designed for seamless integration into projects. It offers a rich set of astrological charts and data, making it an invaluable tool for both developers and astrology enthusiasts.\",\n    contact={\n        \"name\": \"Kerykeion Astrology\",\n        \"url\": \"https://www.kerykeion.net/\",\n        \"email\": settings.admin_email,\n    },\n    license_info={\n        \"name\": \"AGPL-3.0\",\n        \"url\": \"https://www.gnu.org/licenses/agpl-3.0.html\",\n    },\n)\n\n#------------------------------------------------------------------------------\n# CORS Middleware for frontend\n#------------------------------------------------------------------------------\n\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n\n#------------------------------------------------------------------------------\n# Static Files & Frontend Routes\n#------------------------------------------------------------------------------\n\n# Servir arquivos estáticos do frontend\napp.mount(\"/static\", StaticFiles(directory=\"frontend\"), name=\"static\")\n\n@app.get(\"/\")\nasync def serve_frontend():\n    \"\"\"Servir a interface frontend\"\"\"\n    return FileResponse(\"frontend/index.html\")\n\n#------------------------------------------------------------------------------\n# API Routers \n#------------------------------------------------------------------------------\n\napp.include_router(main_router.router, tags=[\"Endpoints\"])\n\n#------------------------------------------------------------------------------\n# Middleware \n#------------------------------------------------------------------------------\n\nif settings.debug is True:\n    pass\n\nelse:\n    app.add_middleware(\n        SecretKeyCheckerMiddleware,\n        secret_key_name=settings.secret_key_name,\n        secret_keys=[\n            settings.rapid_api_secret_key,\n        ],\n    )\n","size_bytes":2637},"frontend/script.js":{"content":"// Elementos do DOM\nconst form = document.getElementById('astralForm');\nconst generateBtn = document.getElementById('generateBtn');\nconst btnText = document.getElementById('btnText');\nconst loading = document.getElementById('loading');\nconst results = document.getElementById('results');\nconst error = document.getElementById('error');\nconst errorMessage = document.getElementById('errorMessage');\n\n// URL base da API\nconst API_BASE_URL = window.location.origin;\n\n// Event listener para o formulário\nform.addEventListener('submit', async (e) => {\n    e.preventDefault();\n    await generateBirthChart();\n});\n\n// Função principal para gerar o mapa astral\nasync function generateBirthChart() {\n    try {\n        showLoading(true);\n        hideError();\n        hideResults();\n\n        const formData = getFormData();\n        const birthChartData = await callBirthChartAPI(formData);\n        \n        displayResults(birthChartData, formData);\n        showResults();\n        \n    } catch (err) {\n        console.error('Erro ao gerar mapa astral:', err);\n        showError(err.message || 'Erro interno. Tente novamente.');\n    } finally {\n        showLoading(false);\n    }\n}\n\n// Capturar dados do formulário\nfunction getFormData() {\n    const formData = new FormData(form);\n    const date = new Date(formData.get('date') + 'T' + formData.get('time'));\n    \n    return {\n        name: formData.get('name'),\n        year: date.getFullYear(),\n        month: date.getMonth() + 1,\n        day: date.getDate(),\n        hour: date.getHours(),\n        minute: date.getMinutes(),\n        city: formData.get('city'),\n        nation: 'BR', // Pode ser ajustado baseado na cidade se necessário\n        theme: formData.get('theme') || 'light'\n    };\n}\n\n// Chamar API de mapa astral\nasync function callBirthChartAPI(data) {\n    const requestBody = {\n        subject: {\n            name: data.name,\n            year: data.year,\n            month: data.month,\n            day: data.day,\n            hour: data.hour,\n            minute: data.minute,\n            city: data.city,\n            nation: data.nation,\n            geonames_username: true, // Sinaliza para usar o username configurado no servidor\n            zodiac_type: 'Tropic'\n        },\n        theme: data.theme,\n        language: 'PT'\n    };\n\n    const response = await fetch(`${API_BASE_URL}/api/v4/birth-chart`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n    });\n\n    if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `Erro HTTP: ${response.status}`);\n    }\n\n    return await response.json();\n}\n\n// Exibir resultados\nfunction displayResults(data, formData) {\n    // Informações do usuário\n    document.getElementById('resultName').textContent = formData.name;\n    document.getElementById('resultDate').textContent = formatDate(formData);\n\n    // SVG do mapa astral\n    document.getElementById('chartSvg').innerHTML = data.chart;\n\n    // Dados astrológicos\n    displayAstrologicalData(data.data);\n\n    // Aspectos\n    displayAspects(data.aspects);\n}\n\n// Formatear data para exibição\nfunction formatDate(data) {\n    return `${data.day.toString().padStart(2, '0')}/${data.month.toString().padStart(2, '0')}/${data.year} às ${data.hour.toString().padStart(2, '0')}:${data.minute.toString().padStart(2, '0')}`;\n}\n\n// Exibir dados astrológicos\nfunction displayAstrologicalData(data) {\n    const container = document.getElementById('astrologicalData');\n    \n    if (!data || !data.planets_degrees) {\n        container.innerHTML = '<p>Dados astrológicos não disponíveis.</p>';\n        return;\n    }\n\n    const planetNames = {\n        'Sun': 'Sol',\n        'Moon': 'Lua',\n        'Mercury': 'Mercúrio',\n        'Venus': 'Vênus',\n        'Mars': 'Marte',\n        'Jupiter': 'Júpiter',\n        'Saturn': 'Saturno',\n        'Uranus': 'Urano',\n        'Neptune': 'Netuno',\n        'Pluto': 'Plutão',\n        'Mean_Node': 'Nodo Norte',\n        'Chiron': 'Quíron',\n        'Ascendant': 'Ascendente',\n        'Medium_Coeli': 'Meio do Céu'\n    };\n\n    const signNames = {\n        'Ari': 'Áries',\n        'Tau': 'Touro',\n        'Gem': 'Gêmeos',\n        'Can': 'Câncer',\n        'Leo': 'Leão',\n        'Vir': 'Virgem',\n        'Lib': 'Libra',\n        'Sco': 'Escorpião',\n        'Sag': 'Sagitário',\n        'Cap': 'Capricórnio',\n        'Aqu': 'Aquário',\n        'Pis': 'Peixes'\n    };\n\n    let html = '<div class=\"planet-info\">';\n    \n    Object.entries(data.planets_degrees).forEach(([planet, info]) => {\n        const planetName = planetNames[planet] || planet;\n        const signName = signNames[info.sign] || info.sign || 'N/A';\n        \n        html += `\n            <div class=\"planet-card\">\n                <div class=\"planet-name\">${planetName}</div>\n                <div class=\"planet-details\">\n                    Signo: ${signName}<br>\n                    Grau: ${(info.abs_pos || 0).toFixed(2)}°<br>\n                    Casa: ${info.house || 'N/A'}\n                </div>\n            </div>\n        `;\n    });\n    \n    html += '</div>';\n    container.innerHTML = html;\n}\n\n// Exibir aspectos\nfunction displayAspects(aspects) {\n    const container = document.getElementById('aspectsData');\n    \n    if (!aspects || aspects.length === 0) {\n        container.innerHTML = '<p>Nenhum aspecto encontrado.</p>';\n        return;\n    }\n\n    const aspectNames = {\n        'conjunction': 'Conjunção',\n        'opposition': 'Oposição',\n        'trine': 'Trígono',\n        'square': 'Quadratura',\n        'sextile': 'Sextil',\n        'quintile': 'Quintil',\n        'semi_sextile': 'Semi-sextil',\n        'quincunx': 'Quincunx'\n    };\n\n    const planetNames = {\n        'Sun': 'Sol',\n        'Moon': 'Lua',\n        'Mercury': 'Mercúrio',\n        'Venus': 'Vênus',\n        'Mars': 'Marte',\n        'Jupiter': 'Júpiter',\n        'Saturn': 'Saturno',\n        'Uranus': 'Urano',\n        'Neptune': 'Netuno',\n        'Pluto': 'Plutão',\n        'Mean_Node': 'Nodo Norte',\n        'Chiron': 'Quíron',\n        'Ascendant': 'Ascendente',\n        'Medium_Coeli': 'Meio do Céu'\n    };\n\n    let html = '<div class=\"aspects-grid\">';\n    \n    aspects.forEach(aspect => {\n        const aspectName = aspectNames[aspect.aspect] || aspect.aspect;\n        const planet1 = planetNames[aspect.p1_name] || aspect.p1_name;\n        const planet2 = planetNames[aspect.p2_name] || aspect.p2_name;\n        \n        html += `\n            <div class=\"aspect-card\">\n                <div class=\"aspect-type\">${aspectName}</div>\n                <div class=\"aspect-details\">\n                    ${planet1} ↔ ${planet2}<br>\n                    Orbe: ${(aspect.orbit || aspect.orb || 0).toFixed(2)}°\n                </div>\n            </div>\n        `;\n    });\n    \n    html += '</div>';\n    container.innerHTML = html;\n}\n\n// Função para mostrar/esconder loading\nfunction showLoading(show) {\n    if (show) {\n        btnText.classList.add('hidden');\n        loading.classList.remove('hidden');\n        generateBtn.disabled = true;\n    } else {\n        btnText.classList.remove('hidden');\n        loading.classList.add('hidden');\n        generateBtn.disabled = false;\n    }\n}\n\n// Função para mostrar erro\nfunction showError(message) {\n    errorMessage.textContent = message;\n    error.classList.remove('hidden');\n}\n\n// Função para esconder erro\nfunction hideError() {\n    error.classList.add('hidden');\n}\n\n// Função para mostrar resultados\nfunction showResults() {\n    results.classList.remove('hidden');\n    results.scrollIntoView({ behavior: 'smooth' });\n}\n\n// Função para esconder resultados\nfunction hideResults() {\n    results.classList.add('hidden');\n}\n\n// Configurações iniciais\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Não é mais necessário pré-preencher coordenadas\n    // O Geonames fará a geocodificação automaticamente\n});","size_bytes":7971},"frontend/styles.css":{"content":"* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    min-height: 100vh;\n    color: #333;\n}\n\n.container {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader {\n    text-align: center;\n    margin-bottom: 40px;\n    color: white;\n}\n\nheader h1 {\n    font-size: 2.5rem;\n    margin-bottom: 10px;\n    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);\n}\n\nheader p {\n    font-size: 1.1rem;\n    opacity: 0.9;\n}\n\n.form-container {\n    background: white;\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n    margin-bottom: 30px;\n}\n\n.form-group {\n    margin-bottom: 25px;\n}\n\n.form-row {\n    display: flex;\n    gap: 20px;\n}\n\n.form-row .form-group {\n    flex: 1;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 8px;\n    font-weight: 600;\n    color: #555;\n}\n\ninput, select {\n    width: 100%;\n    padding: 12px 16px;\n    border: 2px solid #e1e5e9;\n    border-radius: 10px;\n    font-size: 16px;\n    transition: all 0.3s ease;\n    background: #f8f9fa;\n}\n\ninput:focus, select:focus {\n    outline: none;\n    border-color: #667eea;\n    background: white;\n    box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);\n}\n\nbutton {\n    width: 100%;\n    padding: 15px;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    color: white;\n    border: none;\n    border-radius: 10px;\n    font-size: 18px;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n}\n\nbutton:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);\n}\n\nbutton:disabled {\n    opacity: 0.7;\n    cursor: not-allowed;\n    transform: none;\n}\n\n.loading {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.spinner {\n    width: 20px;\n    height: 20px;\n    border: 2px solid rgba(255,255,255,0.3);\n    border-top: 2px solid white;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n}\n\n.hidden {\n    display: none !important;\n}\n\n.results {\n    background: white;\n    border-radius: 20px;\n    padding: 40px;\n    box-shadow: 0 20px 40px rgba(0,0,0,0.1);\n    margin-bottom: 30px;\n}\n\n.result-header {\n    text-align: center;\n    margin-bottom: 30px;\n    padding-bottom: 20px;\n    border-bottom: 2px solid #f1f3f4;\n}\n\n.result-header h2 {\n    color: #667eea;\n    font-size: 2rem;\n    margin-bottom: 10px;\n}\n\n.result-info {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n    font-weight: 500;\n    color: #666;\n}\n\n.chart-container {\n    text-align: center;\n    margin: 30px 0;\n    padding: 20px;\n    background: #f8f9fa;\n    border-radius: 15px;\n}\n\n.chart-container svg {\n    max-width: 100%;\n    height: auto;\n    border-radius: 10px;\n}\n\n.data-container, .aspects-container {\n    margin-top: 30px;\n}\n\n.data-container h3, .aspects-container h3 {\n    color: #667eea;\n    margin-bottom: 20px;\n    font-size: 1.3rem;\n}\n\n.planet-info {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 15px;\n    margin-bottom: 20px;\n}\n\n.planet-card {\n    background: #f8f9fa;\n    padding: 15px;\n    border-radius: 10px;\n    border-left: 4px solid #667eea;\n}\n\n.planet-name {\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 5px;\n}\n\n.planet-details {\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.aspects-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 15px;\n}\n\n.aspect-card {\n    background: #f8f9fa;\n    padding: 15px;\n    border-radius: 10px;\n    border-left: 4px solid #764ba2;\n}\n\n.aspect-type {\n    font-weight: 600;\n    color: #333;\n    margin-bottom: 5px;\n}\n\n.aspect-details {\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.error {\n    background: #ffe6e6;\n    color: #d63031;\n    padding: 20px;\n    border-radius: 10px;\n    border: 1px solid #fab1a0;\n    text-align: center;\n    margin-bottom: 30px;\n}\n\nfooter {\n    text-align: center;\n    color: white;\n    opacity: 0.8;\n    margin-top: 40px;\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 15px;\n    }\n    \n    header h1 {\n        font-size: 2rem;\n    }\n    \n    .form-container {\n        padding: 30px 20px;\n    }\n    \n    .form-row {\n        flex-direction: column;\n        gap: 0;\n    }\n    \n    .result-info {\n        flex-direction: column;\n        gap: 10px;\n    }\n    \n    .planet-info {\n        grid-template-columns: 1fr;\n    }\n    \n    .aspects-grid {\n        grid-template-columns: 1fr;\n    }\n}","size_bytes":4661},"tests/test_main.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n\nfrom sys import path\nfrom pathlib import Path\n\npath.append(str(Path(__file__).parent.parent))\n\nfrom fastapi.testclient import TestClient\nfrom app.main import app\nfrom datetime import datetime, timezone\n\nclient = TestClient(app)\n\n\ndef test_status():\n    \"\"\"\n    Tests if the status endpoint returns the correct status.\n    \"\"\"\n\n    response = client.get(\"/\")\n\n    assert response.status_code == 200\n    assert response.json()[\"status\"] == \"OK\"\n\n\ndef test_get_now():\n    \"\"\"\n    Tests if the now function returns the correct utm time.\n    \"\"\"\n\n    now = datetime.now(timezone.utc)\n    response = client.get(\"/api/v4/now\")\n\n    assert response.status_code == 200\n    assert response.json()[\"status\"] == \"OK\"\n    assert response.json()[\"data\"][\"name\"] == \"Now\"\n    assert response.json()[\"data\"][\"year\"] == now.year\n    assert response.json()[\"data\"][\"month\"] == now.month\n    assert response.json()[\"data\"][\"day\"] == now.day\n    assert response.json()[\"data\"][\"minute\"] == now.minute\n\n\ndef test_birth_data():\n    \"\"\"Test if the birth data is returned correctly\"\"\"\n\n    response = client.post(\n        \"/api/v4/birth-data\",\n        json={\n            \"subject\": {\n                \"name\": \"FastAPI Unit Test\",\n                \"year\": 1946,\n                \"month\": 6,\n                \"day\": 16,\n                \"hour\": 10,\n                \"minute\": 10,\n                \"longitude\": 12.4963655,\n                \"latitude\": 41.9027835,\n                \"city\": \"Roma\",\n                \"nation\": \"IT\",\n                \"timezone\": \"Europe/Rome\",\n                \"language\": \"IT\",\n            }\n        },\n    )\n\n    assert response.status_code == 200\n    assert response.json()[\"status\"] == \"OK\"\n\n    assert response.json()[\"data\"][\"nation\"] == \"IT\"\n\n    assert response.json()[\"data\"][\"sun\"][\"name\"] == \"Sun\"\n    assert response.json()[\"data\"][\"sun\"][\"quality\"] == \"Mutable\"\n    assert response.json()[\"data\"][\"sun\"][\"element\"] == \"Air\"\n    assert response.json()[\"data\"][\"sun\"][\"sign\"] == \"Gem\"\n    assert response.json()[\"data\"][\"sun\"][\"sign_num\"] == 2\n    assert round(response.json()[\"data\"][\"sun\"][\"position\"]) == 25\n    assert round(response.json()[\"data\"][\"sun\"][\"abs_pos\"]) == 85\n    assert response.json()[\"data\"][\"sun\"][\"emoji\"] == \"♊️\"\n    assert response.json()[\"data\"][\"sun\"][\"house\"] == \"Eleventh_House\"\n    assert response.json()[\"data\"][\"sun\"][\"retrograde\"] == False\n    assert response.json()[\"data\"][\"sun\"][\"point_type\"] == \"Planet\"\n\n    assert response.json()[\"data\"][\"lunar_phase\"][\"moon_emoji\"] == \"🌖\"\n\n\ndef test_relationship_score():\n    \"\"\"\n    Tests if the relationship score is returned correctly\n    \"\"\"\n\n    response = client.post(\n        \"/api/v4/relationship-score\",\n        json={\n            \"first_subject\": {\n                \"name\": \"FastAPI Unit Test\",\n                \"year\": 1946,\n                \"month\": 6,\n                \"day\": 16,\n                \"hour\": 10,\n                \"minute\": 10,\n                \"longitude\": 12.4963655,\n                \"latitude\": 41.9027835,\n                \"city\": \"Roma\",\n                \"nation\": \"IT\",\n                \"timezone\": \"Europe/Rome\",\n                \"language\": \"IT\",\n            },\n            \"second_subject\": {\n                \"name\": \"FastAPI Unit Test\",\n                \"year\": 1946,\n                \"month\": 6,\n                \"day\": 16,\n                \"hour\": 10,\n                \"minute\": 10,\n                \"longitude\": 12.4963655,\n                \"latitude\": 41.9027835,\n                \"city\": \"Roma\",\n                \"nation\": \"IT\",\n                \"timezone\": \"Europe/Rome\",\n                \"language\": \"IT\",\n            },\n        },\n    )\n\n    assert response.status_code == 200\n    assert response.json()[\"status\"] == \"OK\"\n    assert response.json()[\"score\"] == 24\n\n\ndef test_birth_chart():\n    \"\"\"\n    Tests if the birth chart is returned correctly\n    \"\"\"\n\n    response = client.post(\n        \"/api/v4/birth-chart\",\n        json={\n            \"subject\": {\n                \"name\": \"FastAPI Unit Test\",\n                \"year\": 1980,\n                \"month\": 12,\n                \"day\": 12,\n                \"hour\": 12,\n                \"minute\": 12,\n                \"longitude\": 0,\n                \"latitude\": 51.4825766,\n                \"city\": \"London\",\n                \"nation\": \"GB\",\n                \"timezone\": \"Europe/London\",\n            }\n        },\n    )\n\n    # ------------------\n    # Status\n    # ------------------\n\n    assert response.status_code == 200\n    assert response.json()[\"status\"] == \"OK\"\n\n    # ------------------\n    # Data\n    # ------------------\n\n    ## Sun\n    assert response.json()[\"data\"][\"sun\"][\"name\"] == \"Sun\"\n    assert response.json()[\"data\"][\"sun\"][\"quality\"] == \"Mutable\"\n    assert response.json()[\"data\"][\"sun\"][\"element\"] == \"Fire\"\n    assert response.json()[\"data\"][\"sun\"][\"sign\"] == \"Sag\"\n    assert response.json()[\"data\"][\"sun\"][\"sign_num\"] == 8\n    assert round(response.json()[\"data\"][\"sun\"][\"position\"]) == 21\n    assert round(response.json()[\"data\"][\"sun\"][\"abs_pos\"]) == 261\n    assert response.json()[\"data\"][\"sun\"][\"emoji\"] == \"♐️\"\n    assert response.json()[\"data\"][\"sun\"][\"point_type\"] == \"Planet\"\n    assert response.json()[\"data\"][\"sun\"][\"house\"] == \"Ninth_House\"\n    assert response.json()[\"data\"][\"sun\"][\"retrograde\"] == False\n\n    ## Moon Phase\n    assert round(response.json()[\"data\"][\"lunar_phase\"][\"degrees_between_s_m\"]) == 58\n    assert response.json()[\"data\"][\"lunar_phase\"][\"moon_phase\"] == 5\n    assert response.json()[\"data\"][\"lunar_phase\"][\"sun_phase\"] == 4\n    assert response.json()[\"data\"][\"lunar_phase\"][\"moon_emoji\"] == \"🌒\"\n\n    # ------------------\n    # Chart\n    # ------------------\n\n    assert type(response.json()[\"chart\"]) == str\n\n    # ------------------\n    # Aspects\n    # ------------------\n\n    assert response.json()[\"aspects\"][0][\"p1_name\"] == \"Sun\"\n    assert round(response.json()[\"aspects\"][0][\"p1_abs_pos\"]) == 261\n    assert response.json()[\"aspects\"][0][\"p2_name\"] == \"Moon\"\n    assert round(response.json()[\"aspects\"][0][\"p2_abs_pos\"]) == 318\n    assert response.json()[\"aspects\"][0][\"aspect\"] == \"sextile\"\n    assert round(response.json()[\"aspects\"][0][\"orbit\"]) == -2\n    assert response.json()[\"aspects\"][0][\"aspect_degrees\"] == 60\n    assert round(response.json()[\"aspects\"][0][\"diff\"]) == 58\n    assert response.json()[\"aspects\"][0][\"p1\"] == 0\n    assert response.json()[\"aspects\"][0][\"p2\"] == 1\n","size_bytes":6475},"app/config/__init__.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n","size_bytes":70},"app/config/config.dev.toml":{"content":"admin_email = \"kerykeion.astrology@gmail.com\"\ndebug = true\ndocs_url = \"/docs\"\nredoc_url = \"/redoc\"\nlog_level = 10\nsecret_key_name = \"X-RapidAPI-Proxy-Secret\"\n\nallowed_hosts = ['*']\n\nallowed_cors_origins = ['*']","size_bytes":210},"app/config/config.prod.toml":{"content":"admin_email = \"kerykeion.astrology@gmail.com\"\ndebug = false\ndocs_url = \"/docs\"\nredoc_url = \"/redoc\"\nlog_level = 20\nsecret_key_name = \"X-RapidAPI-Proxy-Secret\"\n\nallowed_hosts = [\n    \"rapidapi.com\",\n    \"*.rapidapi.com\",\n\n    # RapidAPI US East:\n    \"107.23.255.128\",\n    \"107.23.255.129\",\n    \"107.23.255.131\",\n    \"107.23.255.132\",\n    \"107.23.255.133\",\n    \"107.23.255.134\",\n    \"107.23.255.135\",\n    \"107.23.255.137\",\n    \"107.23.255.138\",\n    \"107.23.255.139\",\n    \"107.23.255.140\",\n    \"107.23.255.141\",\n    \"107.23.255.142\",\n    \"107.23.255.143\",\n    \"107.23.255.144\",\n    \"107.23.255.145\",\n    \"107.23.255.146\",\n    \"107.23.255.147\",\n    \"107.23.255.148\",\n    \"107.23.255.149\",\n    \"107.23.255.150\",\n    \"107.23.255.151\",\n    \"107.23.255.152\",\n    \"107.23.255.153\",\n    \"107.23.255.154\",\n    \"107.23.255.155\",\n    \"107.23.255.156\",\n    \"107.23.255.157\",\n    \"107.23.255.158\",\n    \"107.23.255.159\",\n\n    # Rapid Api US West:\n    \"35.162.152.183\",\n    \"52.38.28.241\",\n    \"52.35.67.149\",\n    \"54.149.215.237\",\n\n    # Mumbai:\n    \"13.127.146.34\",\n    \"13.127.207.241\",\n    \"13.232.235.243\",\n    \"13.233.81.143\",\n\n    # Tokio:\n    \"13.112.233.15\",\n    \"54.250.57.56\",\n    \"18.182.156.77\",\n    \"52.194.200.157\",\n\n    # Frankfurt:\n    \"3.120.160.95\",\n    \"18.184.214.33\",\n    \"18.197.117.10\",\n    \"3.121.144.151\",\n\n    # Sydney:\n    \"13.239.156.114\",\n    \"13.238.1.253\",\n    \"13.54.58.4\",\n    \"54.153.234.158\",\n\n    # South America:\n    \"18.228.167.221\",\n    \"18.228.209.157\",\n    \"18.228.209.53\",\n    \"18.228.69.72\",\n\n    # Singapore:\n    \"13.228.169.5\",\n    \"3.0.35.31\",\n    \"3.1.111.112\",\n    \"52.220.50.179\",\n\n    # Ireland:\n    \"34.250.225.89\",\n    \"52.30.208.221\",\n    \"63.34.177.151\",\n    \"63.35.2.11\",\n]\n\nallowed_cors_origins = []\n","size_bytes":1740},"app/config/settings.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n\nimport pathlib\nfrom logging import getLogger\nfrom os import getenv\nfrom pydantic_settings import BaseSettings\nfrom tomllib import load as load_toml\n\n\nlogger = getLogger(__name__)\n\nENV_TYPE = getenv(\"ENV_TYPE\", False)\nRAPID_API_SECRET_KEY = getenv(\"RAPID_API_SECRET_KEY\", False)\nGEONAMES_USERNAME = getenv(\"GEONAMES_USERNAME\", False)\n\n# Open config file\nif ENV_TYPE == \"production\":\n    logger.info(\"Loading production config\")\n    with open(pathlib.Path(__file__).parent.absolute() / \"config.prod.toml\", \"rb\") as config_file:\n        config = load_toml(config_file)\n\nelif ENV_TYPE == \"test\":\n    logger.info(\"Loading test config\")\n    with open(pathlib.Path(__file__).parent.absolute() / \"config.test.toml\", \"rb\") as config_file:\n        config = load_toml(config_file)\n\nelif ENV_TYPE == \"dev\":\n    logger.info(\"Loading development config\")\n    with open(pathlib.Path(__file__).parent.absolute() / \"config.dev.toml\", \"rb\") as config_file:\n        config = load_toml(config_file)\n\nelse:\n    logger.info(\"No ENV_TYPE set, loading production config\")\n    with open(pathlib.Path(__file__).parent.absolute() / \"config.prod.toml\", \"rb\") as config_file:\n        config = load_toml(config_file)\n\n\nclass Settings(BaseSettings):\n    # Environment variables\n    rapid_api_secret_key: str = getenv(\"RAPID_API_SECRET_KEY\", \"\")\n    geonames_username: str = getenv(\"GEONAMES_USERNAME\", \"\")\n    env_type: str | bool = ENV_TYPE\n\n    # Config file\n    admin_email: str = config[\"admin_email\"]\n    allowed_hosts: list = config[\"allowed_hosts\"]\n    allowed_cors_origins: list = config[\"allowed_cors_origins\"]\n    debug: bool = config[\"debug\"]\n    docs_url: str | None = config[\"docs_url\"]\n    redoc_url: str | None = config[\"redoc_url\"]\n    secret_key_name: str = config[\"secret_key_name\"]\n\n    # Common settings\n    log_level: int = int(config[\"log_level\"])\n    LOGGING_CONFIG: dict = {\n        \"version\": 1,\n        \"disable_existing_loggers\": False,\n        \"formatters\": {\n            \"default\": {\n                \"()\": \"uvicorn.logging.DefaultFormatter\",\n                \"fmt\": \"[%(asctime)s] %(levelprefix)s %(message)s - Module: %(name)s\",\n                \"use_colors\": None,\n                \"datefmt\": \"%Y-%m-%d %H:%M:%S\",\n            },\n            \"access\": {\n                \"()\": \"uvicorn.logging.AccessFormatter\",\n                \"fmt\": \"[%(asctime)s] %(levelprefix)s %(message)s - Module: %(name)s\",\n                \"datefmt\": \"%Y-%m-%d %H:%M:%S\",\n            },\n        },\n        \"handlers\": {\n            \"default\": {\n                \"formatter\": \"default\",\n                \"class\": \"logging.StreamHandler\",\n                \"stream\": \"ext://sys.stderr\",\n            },\n            \"access\": {\n                \"formatter\": \"access\",\n                \"class\": \"logging.StreamHandler\",\n                \"stream\": \"ext://sys.stdout\",\n            },\n        },\n        \"loggers\": {\n            \"uvicorn\": {\"handlers\": [\"default\"], \"level\": log_level, \"propagate\": False},\n            \"uvicorn.error\": {\n                \"level\": log_level,\n            },\n            \"root\": {\n                \"handlers\": [\"default\"],\n                \"level\": log_level,\n            },\n            \"uvicorn.access\": {\"handlers\": [\"access\"], \"level\": log_level, \"propagate\": False},\n        },\n    }\n\n\nsettings = Settings()\n","size_bytes":3366},"app/middleware/__init__.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n","size_bytes":70},"app/middleware/secret_key_checker_middleware.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n\nfrom starlette.datastructures import Headers\nfrom starlette.responses import JSONResponse\nfrom starlette.types import ASGIApp, Receive, Scope, Send\nimport logging\n\nclass SecretKeyCheckerMiddleware:\n    def __init__(self, app: ASGIApp, secret_key_name: str, secret_keys: list = []) -> None:\n        self.app = app\n        self.secret_key_values = list(secret_keys)\n        self.secret_key_name = secret_key_name\n\n        if not self.secret_key_name or not self.secret_key_values:\n            logging.critical(\"Secret key name or secret key values not set. The middleware will let all requests pass through!\")\n\n    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:\n        headers = Headers(scope=scope)\n        header_key = headers.get(self.secret_key_name, \"\").split(\":\")[0]\n        is_valid_key = False\n\n        for key in self.secret_key_values:\n            if header_key == key:\n                is_valid_key = True\n                break\n\n        if is_valid_key:\n            await self.app(scope, receive, send)\n\n        else:\n            response = JSONResponse(status_code=400, content={\"status\": \"KO\", \"message\": \"Bad request\"})\n\n            await response(scope, receive, send)\n","size_bytes":1284},"app/routers/__init__.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n","size_bytes":70},"app/routers/main_router.py":{"content":"# External Libraries\nfrom fastapi import APIRouter, Request\nfrom fastapi.responses import JSONResponse\nfrom logging import getLogger\nfrom kerykeion import (\n    AstrologicalSubject, \n    KerykeionChartSVG, \n    SynastryAspects, \n    NatalAspects, \n    RelationshipScoreFactory, \n    CompositeSubjectFactory\n)\nfrom kerykeion.settings.config_constants import DEFAULT_ACTIVE_POINTS, DEFAULT_ACTIVE_ASPECTS\n\n# Local\nfrom ..config.settings import settings\nfrom ..utils.internal_server_error_json_response import InternalServerErrorJsonResponse\nfrom ..utils.get_time_from_google import get_time_from_google\nfrom ..utils.write_request_to_log import get_write_request_to_log\nfrom ..types.request_models import (\n    BirthDataRequestModel,\n    BirthChartRequestModel,\n    SynastryChartRequestModel,\n    TransitChartRequestModel,\n    RelationshipScoreRequestModel,\n    SynastryAspectsRequestModel,\n    NatalAspectsRequestModel,\n    CompositeChartRequestModel\n)\nfrom ..types.response_models import (\n    BirthDataResponseModel,\n    BirthChartResponseModel,\n    SynastryChartResponseModel,\n    RelationshipScoreResponseModel,\n    SynastryAspectsResponseModel,\n    CompositeChartResponseModel,\n    CompositeAspectsResponseModel,\n    TransitAspectsResponseModel,\n    TransitChartResponseModel\n)\n\nlogger = getLogger(__name__)\nwrite_request_to_log = get_write_request_to_log(logger)\n\nrouter = APIRouter()\n\nGEONAMES_ERROR_MESSAGE = \"City/Nation name error or invalid GeoNames username. Please check your username or city name and try again. You can create a free username here: https://www.geonames.org/login/. If you want to bypass the usage of GeoNames, please remove the geonames_username field from the request. Note: The nation field should be the country code (e.g. US, UK, FR, DE, etc.).\"\n\ndef resolve_geonames_username(subject_geonames_username):\n    \"\"\"\n    Resolve the geonames username from the request or environment.\n    If subject_geonames_username is True or a string, use the configured username from environment.\n    If subject_geonames_username is None/False, return None.\n    \"\"\"\n    if subject_geonames_username:\n        # If True or any truthy value, use the configured username from environment\n        return settings.geonames_username if settings.geonames_username else None\n    return None\n\n@router.get(\"/api/v4/health\", response_description=\"Health check\", include_in_schema=False)\nasync def health(request: Request) -> JSONResponse:\n    \"\"\"\n    Health check endpoint.\n    \"\"\"\n\n    write_request_to_log(20, request, \"Health check\")\n\n    return JSONResponse(content={\"status\": \"OK\"}, status_code=200)\n\n\n@router.get(\"/api/v4/status\", response_description=\"Status of the API\", response_model=BirthDataResponseModel, include_in_schema=False)\nasync def status(request: Request) -> JSONResponse:\n    \"\"\"\n    Returns the status of the API.\n    \"\"\"\n\n    from ..config.settings import settings\n\n    write_request_to_log(20, request, \"API is up and running\")\n    response_dict = {\n        \"status\": \"OK\",\n        \"environment\": settings.env_type,\n        \"debug\": settings.debug,\n    }\n\n    return JSONResponse(content=response_dict, status_code=200)\n\n\n@router.get(\"/api/v4/now\", response_description=\"Current astrological data\", response_model=BirthDataResponseModel)\nasync def get_now(request: Request) -> JSONResponse:\n    \"\"\"\n    Retrieve astrological data for the current moment.\n    \"\"\"\n\n    # Get current UTC time from the time API\n    write_request_to_log(20, request, \"Getting current astrological data\")\n    \n    logger.debug(\"Getting current UTC time from the time API\")\n    try:\n        utc_datetime = get_time_from_google()\n        datetime_dict = {\n            \"year\": utc_datetime.year, # type: ignore\n            \"month\": utc_datetime.month, # type: ignore\n            \"day\": utc_datetime.day, # type: ignore\n            \"hour\": utc_datetime.hour, # type: ignore\n            \"minute\": utc_datetime.minute, # type: ignore\n            \"second\": utc_datetime.second, # type: ignore\n        }\n    except Exception as e:\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n    logger.debug(f\"Current UTC time: {datetime_dict}\")\n\n    try:\n        # On some Cloud providers, the time is not set correctly, so we need to get the current UTC time from the time API\n        today_subject = AstrologicalSubject(\n            city=\"GMT\",\n            nation=\"UK\",\n            lat=51.477928,\n            lng=-0.001545,\n            tz_str=\"GMT\",\n            year=datetime_dict[\"year\"],\n            month=datetime_dict[\"month\"],\n            day=datetime_dict[\"day\"],\n            hour=datetime_dict[\"hour\"],\n            minute=datetime_dict[\"minute\"],\n            online=False,\n        )\n\n        response_dict = {\"status\": \"OK\", \"data\": today_subject.model().model_dump()}\n\n        return JSONResponse(content=response_dict, status_code=200)\n\n    except Exception as e:\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/birth-data\", response_description=\"Birth data\", response_model=BirthDataResponseModel)\nasync def birth_data(birth_data_request: BirthDataRequestModel, request: Request):\n    \"\"\"\n    Retrieve astrological data for a specific birth date. Does not include the chart nor the aspects.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Birth data request\")\n\n    subject = birth_data_request.subject\n\n    try:\n        # Resolve geonames username from request or environment settings\n        geo_username = resolve_geonames_username(subject.geonames_username)\n        geo_online = bool(geo_username)\n        \n        astrological_subject = AstrologicalSubject(\n            name=subject.name,\n            year=subject.year,\n            month=subject.month,\n            day=subject.day,\n            hour=subject.hour,\n            minute=subject.minute,\n            city=subject.city,\n            nation=subject.nation,\n            lat=subject.latitude,\n            lng=subject.longitude,\n            tz_str=subject.timezone,\n            zodiac_type=subject.zodiac_type, # type: ignore\n            sidereal_mode=subject.sidereal_mode,\n            houses_system_identifier=subject.houses_system_identifier, # type: ignore\n            perspective_type=subject.perspective_type, # type: ignore\n            geonames_username=geo_username,\n            online=geo_online,\n        )\n\n        data = astrological_subject.model().model_dump()\n\n        response_dict = {\"status\": \"OK\", \"data\": data}\n\n        return JSONResponse(content=response_dict, status_code=200)\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/birth-chart\", response_description=\"Birth chart\", response_model=BirthChartResponseModel)\nasync def birth_chart(request_body: BirthChartRequestModel, request: Request):\n    \"\"\"\n    Retrieve an astrological birth chart for a specific birth date. Includes the data for the subject and the aspects.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Birth chart request\")\n\n    subject = request_body.subject\n\n    try:\n        # Resolve geonames username from request or environment settings\n        geo_username = resolve_geonames_username(subject.geonames_username)\n        geo_online = bool(geo_username)\n        \n        astrological_subject = AstrologicalSubject(\n            name=subject.name,\n            year=subject.year,\n            month=subject.month,\n            day=subject.day,\n            hour=subject.hour,\n            minute=subject.minute,\n            city=subject.city,\n            nation=subject.nation,\n            lat=subject.latitude,\n            lng=subject.longitude,\n            tz_str=subject.timezone,\n            zodiac_type=subject.zodiac_type, # type: ignore\n            sidereal_mode=subject.sidereal_mode,\n            houses_system_identifier=subject.houses_system_identifier, # type: ignore\n            perspective_type=subject.perspective_type, # type: ignore\n            geonames_username=geo_username,\n            online=geo_online,\n        )\n\n        data = astrological_subject.model().model_dump()\n\n        kerykeion_chart = KerykeionChartSVG(\n            astrological_subject,\n            theme=request_body.theme,\n            chart_language=request_body.language or \"EN\",\n            active_points=request_body.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=request_body.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        )\n\n        if request_body.wheel_only:\n            svg = kerykeion_chart.makeWheelOnlyTemplate(minify=True)\n        else:\n            svg = kerykeion_chart.makeTemplate(minify=True)\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"chart\": svg,\n                \"data\": data,\n                \"aspects\": [aspect.model_dump() for aspect in kerykeion_chart.aspects_list]\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        # If error contains \"wrong username\"\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/synastry-chart\", response_description=\"Synastry data\", response_model=SynastryChartResponseModel)\nasync def synastry_chart(synastry_chart_request: SynastryChartRequestModel, request: Request):\n    \"\"\"\n    Retrieve a synastry chart between two subjects. Includes the data for the subjects and the aspects.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Synastry chart request\")\n\n    first_subject = synastry_chart_request.first_subject\n    second_subject = synastry_chart_request.second_subject\n\n    try:\n        # Resolve geonames username from request or environment settings\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings\n        second_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        second_geo_online = bool(second_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=second_subject.name,\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=second_subject.zodiac_type, # type: ignore\n            sidereal_mode=second_subject.sidereal_mode,\n            houses_system_identifier=second_subject.houses_system_identifier, # type: ignore\n            perspective_type=second_subject.perspective_type, # type: ignore\n            geonames_username=second_geo_username,\n            online=second_geo_online,\n        )\n\n        kerykeion_chart = KerykeionChartSVG(\n            first_astrological_subject,\n            second_obj=second_astrological_subject,\n            chart_type=\"Synastry\",\n            theme=synastry_chart_request.theme,\n            chart_language=synastry_chart_request.language or \"EN\",\n            active_points=synastry_chart_request.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=synastry_chart_request.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        )\n\n        if synastry_chart_request.wheel_only:\n            svg = kerykeion_chart.makeWheelOnlyTemplate(minify=True)\n        else:\n            svg = kerykeion_chart.makeTemplate(minify=True)\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"chart\": svg,\n                \"aspects\": [aspect.model_dump() for aspect in kerykeion_chart.aspects_list],\n                \"data\": {\n                    \"first_subject\": first_astrological_subject.model().model_dump(),\n                    \"second_subject\": second_astrological_subject.model().model_dump(),\n                },\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/transit-chart\", response_description=\"Transit data\", response_model=TransitChartResponseModel)\nasync def transit_chart(transit_chart_request: TransitChartRequestModel, request: Request):\n    \"\"\"\n    Retrieve a transit chart for a specific subject. Includes the data for the subject and the aspects.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Transit chart request\")\n\n    first_subject = transit_chart_request.first_subject\n    second_subject = transit_chart_request.transit_subject\n\n    try:\n        # Resolve geonames username from request or environment settings for first subject\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings for transit subject\n        transit_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        transit_geo_online = bool(transit_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=\"Transit\",\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=first_astrological_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=transit_geo_username,\n            online=transit_geo_online,\n        )\n\n        kerykeion_chart = KerykeionChartSVG(\n            first_astrological_subject,\n            second_obj=second_astrological_subject,\n            chart_type=\"Transit\",\n            theme=transit_chart_request.theme,\n            chart_language=transit_chart_request.language or \"EN\",\n            active_points=transit_chart_request.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=transit_chart_request.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        )\n\n        if transit_chart_request.wheel_only:\n            svg = kerykeion_chart.makeWheelOnlyTemplate(minify=True)\n        else:\n            svg = kerykeion_chart.makeTemplate(minify=True)\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"chart\": svg,\n                \"aspects\": [aspect.model_dump() for aspect in kerykeion_chart.aspects_list],\n                \"data\": {\n                    \"subject\": first_astrological_subject.model().model_dump(),\n                    \"transit\": second_astrological_subject.model().model_dump(),\n                },\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/transit-aspects-data\", response_description=\"Transit aspects data\", response_model=TransitAspectsResponseModel)\nasync def transit_aspects_data(transit_chart_request: TransitChartRequestModel, request: Request) -> JSONResponse:\n    \"\"\"\n    Retrieve transit aspects and data for a specific subject. Does not include the chart.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Transit aspects data request\")\n\n    first_subject = transit_chart_request.first_subject\n    second_subject = transit_chart_request.transit_subject\n\n    try:\n        # Resolve geonames username from request or environment settings for first subject\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings for transit subject\n        transit_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        transit_geo_online = bool(transit_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=\"Transit\",\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=first_astrological_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=transit_geo_username,\n            online=transit_geo_online,\n        )\n\n        aspects = SynastryAspects(\n            first_astrological_subject,\n            second_astrological_subject,\n            active_points=transit_chart_request.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=transit_chart_request.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        ).relevant_aspects\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"data\": {\n                    \"subject\": first_astrological_subject.model().model_dump(),\n                    \"transit\": second_astrological_subject.model().model_dump(),\n                },\n                \"aspects\": [aspect.model_dump() for aspect in aspects],\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/synastry-aspects-data\", response_description=\"Synastry aspects data\", response_model=SynastryAspectsResponseModel)\nasync def synastry_aspects_data(aspects_request_content: SynastryAspectsRequestModel, request: Request) -> JSONResponse:\n    \"\"\"\n    Retrieve synastry aspects between two subjects. Does not include the chart.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Synastry aspects data request\")\n\n    first_subject = aspects_request_content.first_subject\n    second_subject = aspects_request_content.second_subject\n\n    try:\n        # Resolve geonames username from request or environment settings for first subject\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings for second subject\n        second_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        second_geo_online = bool(second_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=second_subject.name,\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=second_subject.zodiac_type, # type: ignore\n            sidereal_mode=second_subject.sidereal_mode,\n            houses_system_identifier=second_subject.houses_system_identifier, # type: ignore\n            perspective_type=second_subject.perspective_type, # type: ignore\n            geonames_username=second_geo_username,\n            online=second_geo_online,\n        )\n\n        aspects = SynastryAspects(\n            first_astrological_subject,\n            second_astrological_subject,\n            active_points=aspects_request_content.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=aspects_request_content.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        ).relevant_aspects\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"data\": {\n                    \"first_subject\": first_astrological_subject.model().model_dump(),\n                    \"second_subject\": second_astrological_subject.model().model_dump(),\n                },\n                \"aspects\": [aspect.model_dump() for aspect in aspects],\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/natal-aspects-data\", response_description=\"Birth aspects data\", response_model=SynastryAspectsResponseModel)\nasync def natal_aspects_data(aspects_request_content: NatalAspectsRequestModel, request: Request) -> JSONResponse:\n    \"\"\"\n    Retrieve natal aspects and data for a specific subject. Does not include the chart.\n    \"\"\"\n\n    write_request_to_log(20, request, f\"Natal aspects data request\")\n\n    subject = aspects_request_content.subject\n\n    try:\n        # Resolve geonames username from request or environment settings\n        geo_username = resolve_geonames_username(subject.geonames_username)\n        geo_online = bool(geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=subject.name,\n            year=subject.year,\n            month=subject.month,\n            day=subject.day,\n            hour=subject.hour,\n            minute=subject.minute,\n            city=subject.city,\n            nation=subject.nation,\n            lat=subject.latitude,\n            lng=subject.longitude,\n            tz_str=subject.timezone,\n            zodiac_type=subject.zodiac_type, # type: ignore\n            sidereal_mode=subject.sidereal_mode,\n            houses_system_identifier=subject.houses_system_identifier, # type: ignore\n            perspective_type=subject.perspective_type, # type: ignore\n            geonames_username=geo_username,\n            online=geo_online,\n        )\n\n        aspects = NatalAspects(\n            first_astrological_subject,\n            active_points=aspects_request_content.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=aspects_request_content.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        ).relevant_aspects\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"data\": {\"subject\": first_astrological_subject.model().model_dump()},\n                \"aspects\": [aspect.model_dump() for aspect in aspects],\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/relationship-score\", response_description=\"Relationship score\", response_model=RelationshipScoreResponseModel)\nasync def relationship_score(relationship_score_request: RelationshipScoreRequestModel, request: Request) -> JSONResponse:\n    \"\"\"\n    Calculates the relevance of the relationship between two subjects using the Ciro Discepolo method.\n\n    Results:\n        - 0 to 5: Minimal relationship\n        - 5 to 10: Medium relationship\n        - 10 to 15: Important relationship\n        - 15 to 20: Very important relationship\n        - 20 to 35: Exceptional relationship\n        - 30 and above: Rare Exceptional relationship\n\n    More details: https://www-cirodiscepolo-it.translate.goog/Articoli/Discepoloele.htm?_x_tr_sl=it&_x_tr_tl=en&_x_tr_hl=it&_x_tr_pto=wapp\n    \"\"\"\n\n    first_subject = relationship_score_request.first_subject\n    second_subject = relationship_score_request.second_subject\n\n    write_request_to_log(20, request, f\"Getting composite data for: {first_subject} and {second_subject}\")\n\n    try:\n        # Resolve geonames username from request or environment settings for first subject\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings for second subject\n        second_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        second_geo_online = bool(second_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=second_subject.name,\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=second_subject.zodiac_type, # type: ignore\n            sidereal_mode=second_subject.sidereal_mode,\n            houses_system_identifier=second_subject.houses_system_identifier, # type: ignore\n            perspective_type=second_subject.perspective_type, # type: ignore\n            geonames_username=second_geo_username,\n            online=second_geo_online,\n        )\n\n        score_factory = RelationshipScoreFactory(first_astrological_subject, second_astrological_subject)\n        score_model = score_factory.get_relationship_score()\n\n        response_content = {\n            \"status\": \"OK\",\n            \"score\": score_model.score_value,\n            \"score_description\": score_model.score_description,\n            \"is_destiny_sign\": score_model.is_destiny_sign,\n            \"aspects\": [aspect.model_dump() for aspect in score_model.aspects],\n            \"data\": {\n                \"first_subject\": first_astrological_subject.model().model_dump(),\n                \"second_subject\": second_astrological_subject.model().model_dump(),\n            },\n        }\n\n        return JSONResponse(content=response_content, status_code=200)\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/composite-chart\", response_description=\"Composite data\", response_model=CompositeChartResponseModel)\nasync def composite_chart(composite_chart_request: CompositeChartRequestModel, request: Request) -> JSONResponse:\n    \"\"\"\n    Retrieve a composite chart between two subjects. Includes the data for the subjects and the aspects.\n    The method used is the midpoint method.\n    \"\"\"\n\n    first_subject = composite_chart_request.first_subject\n    second_subject = composite_chart_request.second_subject\n\n    write_request_to_log(20, request, f\"Getting composite data for: {first_subject} and {second_subject}\")\n\n    try:\n        # Resolve geonames username from request or environment settings for first subject\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings for second subject\n        second_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        second_geo_online = bool(second_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=second_subject.name,\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=second_subject.zodiac_type, # type: ignore\n            sidereal_mode=second_subject.sidereal_mode,\n            houses_system_identifier=second_subject.houses_system_identifier, # type: ignore\n            perspective_type=second_subject.perspective_type, # type: ignore\n            geonames_username=second_geo_username,\n            online=second_geo_online,\n        )\n\n        composite_factory = CompositeSubjectFactory(first_astrological_subject, second_astrological_subject)\n        composite_subject = composite_factory.get_midpoint_composite_subject_model()\n\n        kerykeion_chart = KerykeionChartSVG(\n            composite_subject,\n            chart_type=\"Composite\",\n            theme=composite_chart_request.theme\n        )\n\n        if composite_chart_request.wheel_only:\n            svg = kerykeion_chart.makeWheelOnlyTemplate(minify=True)\n        else:\n            svg = kerykeion_chart.makeTemplate(minify=True)\n\n        composite_subject_dict = composite_subject.model_dump()\n        for key in [\"first_subject\", \"second_subject\"]:\n            if key in composite_subject_dict:\n                composite_subject_dict.pop(key)\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"chart\": svg,\n                \"aspects\": [aspect.model_dump() for aspect in kerykeion_chart.aspects_list],\n                \"data\": {\n                    \"composite_subject\": composite_subject_dict,\n                    \"first_subject\": first_astrological_subject.model().model_dump(),\n                    \"second_subject\": second_astrological_subject.model().model_dump(),\n                },\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse\n\n\n@router.post(\"/api/v4/composite-aspects-data\", response_description=\"Composite aspects data\", response_model=CompositeAspectsResponseModel)\nasync def composite_aspects_data(composite_chart_request: CompositeChartRequestModel, request: Request) -> JSONResponse:\n    \"\"\"\n    Retrieves the data and the aspects for a composite chart between two subjects. Does not include the chart.\n    \"\"\"\n\n    first_subject = composite_chart_request.first_subject\n    second_subject = composite_chart_request.second_subject\n\n    write_request_to_log(20, request, f\"Getting composite data for: {first_subject} and {second_subject}\")\n\n    try:\n        # Resolve geonames username from request or environment settings for first subject\n        first_geo_username = resolve_geonames_username(first_subject.geonames_username)\n        first_geo_online = bool(first_geo_username)\n        \n        first_astrological_subject = AstrologicalSubject(\n            name=first_subject.name,\n            year=first_subject.year,\n            month=first_subject.month,\n            day=first_subject.day,\n            hour=first_subject.hour,\n            minute=first_subject.minute,\n            city=first_subject.city,\n            nation=first_subject.nation,\n            lat=first_subject.latitude,\n            lng=first_subject.longitude,\n            tz_str=first_subject.timezone,\n            zodiac_type=first_subject.zodiac_type, # type: ignore\n            sidereal_mode=first_subject.sidereal_mode,\n            houses_system_identifier=first_subject.houses_system_identifier, # type: ignore\n            perspective_type=first_subject.perspective_type, # type: ignore\n            geonames_username=first_geo_username,\n            online=first_geo_online,\n        )\n\n        # Resolve geonames username from request or environment settings for second subject\n        second_geo_username = resolve_geonames_username(second_subject.geonames_username)\n        second_geo_online = bool(second_geo_username)\n        \n        second_astrological_subject = AstrologicalSubject(\n            name=second_subject.name,\n            year=second_subject.year,\n            month=second_subject.month,\n            day=second_subject.day,\n            hour=second_subject.hour,\n            minute=second_subject.minute,\n            city=second_subject.city,\n            nation=second_subject.nation,\n            lat=second_subject.latitude,\n            lng=second_subject.longitude,\n            tz_str=second_subject.timezone,\n            zodiac_type=second_subject.zodiac_type, # type: ignore\n            sidereal_mode=second_subject.sidereal_mode,\n            houses_system_identifier=second_subject.houses_system_identifier, # type: ignore\n            perspective_type=second_subject.perspective_type, # type: ignore\n            geonames_username=second_geo_username,\n            online=second_geo_online,\n        )\n\n        composite_factory = CompositeSubjectFactory(first_astrological_subject, second_astrological_subject)\n        composite_data = composite_factory.get_midpoint_composite_subject_model()\n        aspects = NatalAspects(\n            composite_data,\n            active_points=composite_chart_request.active_points or DEFAULT_ACTIVE_POINTS,\n            active_aspects=composite_chart_request.active_aspects or DEFAULT_ACTIVE_ASPECTS,\n        ).relevant_aspects\n\n        composite_subject_dict = composite_data.model_dump()\n        for key in [\"first_subject\", \"second_subject\"]:\n            if key in composite_subject_dict:\n                composite_subject_dict.pop(key)\n\n        return JSONResponse(\n            content={\n                \"status\": \"OK\",\n                \"data\": {\n                    \"composite_subject\": composite_subject_dict,\n                    \"first_subject\": first_astrological_subject.model().model_dump(),\n                    \"second_subject\": second_astrological_subject.model().model_dump(),\n                },\n                \"aspects\": [aspect.model_dump() for aspect in aspects],\n            },\n            status_code=200,\n        )\n\n    except Exception as e:\n        if \"data found for this city\" in str(e):\n            write_request_to_log(40, request, e)\n            return JSONResponse(\n                content={\n                    \"status\": \"ERROR\",\n                    \"message\": GEONAMES_ERROR_MESSAGE,\n                },\n                status_code=400,\n            )\n\n        write_request_to_log(40, request, e)\n        return InternalServerErrorJsonResponse","size_bytes":42501},"app/tmp/README.md":{"content":"This directory is used to store temporary files.\n","size_bytes":49},"app/types/request_models.py":{"content":"from pydantic import BaseModel, Field, field_validator, model_validator\nfrom typing import Optional, get_args, Union\nfrom kerykeion.kr_types.kr_models import ActiveAspect\nfrom pytz import all_timezones\nfrom kerykeion.kr_types.kr_literals import KerykeionChartTheme, KerykeionChartLanguage, SiderealMode, ZodiacType, HousesSystemIdentifier, PerspectiveType, AxialCusps, Planet\nfrom kerykeion.settings.config_constants import DEFAULT_ACTIVE_POINTS, DEFAULT_ACTIVE_ASPECTS\nfrom abc import ABC\n\nclass AbstractBaseSubjectModel(BaseModel, ABC):\n    year: int = Field(description=\"The year of birth.\", examples=[1980])\n    month: int = Field(description=\"The month of birth.\", examples=[12])\n    day: int = Field(description=\"The day of birth.\", examples=[12])\n    hour: int = Field(description=\"The hour of birth.\", examples=[12])\n    minute: int = Field(description=\"The minute of birth.\", examples=[12])\n    longitude: Optional[float] = Field(description=\"The longitude of the birth location. Defaults on London.\", examples=[0], default=None)\n    latitude: Optional[float] = Field(description=\"The latitude of the birth location. Defaults on London.\", examples=[51.4825766], default=None)\n    city: str = Field(description=\"The name of city of birth.\", examples=[\"London\"])\n    nation: Optional[str] = Field(default=\"null\", description=\"The name of the nation of birth.\", examples=[\"GB\"])\n    timezone: Optional[str] = Field(description=\"The timezone of the birth location.\", examples=[\"Europe/London\"], default=None)\n    geonames_username: Optional[Union[str, bool]] = Field(description=\"The username for the Geonames API, or True to use the configured username.\", examples=[None, True, \"your_username\"], default=None)\n\n\n    @field_validator(\"longitude\")\n    def validate_longitude(cls, value):\n        if value is None:\n            return None\n        if value < -180 or value > 180:\n            raise ValueError(f\"Invalid longitude '{value}'. Please use a value between -180 and 180.\")\n        return value\n\n    @field_validator(\"latitude\")\n    def validate_latitude(cls, value):\n        if value is None:\n            return None\n        if value < -90 or value > 90:\n            raise ValueError(f\"Invalid latitude '{value}'. Please use a value between -90 and 90.\")\n        return value\n\n    @field_validator(\"timezone\")\n    def validate_timezone(cls, value):\n        if value is None:\n            return None\n        if value not in all_timezones:\n            raise ValueError(f\"Invalid timezone '{value}'. Please use a valid timezone. You can find a list of valid timezones at https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.\")\n        return value\n\n    @field_validator(\"month\")\n    def validate_month(cls, value):\n        if value is None:\n            return None\n        if value < 1 or value > 12:\n            raise ValueError(f\"Invalid month '{value}'. Please use a value between 1 and 12.\")\n        return value\n\n    @field_validator(\"day\")\n    def validate_day(cls, value, values):\n        month = values.data.get(\"month\")\n\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if value < 1 or value > 31:\n                raise ValueError(f\"Invalid day '{value}'. Please use a value between 1 and 31.\")\n        elif month in [4, 6, 9, 11]:\n            if value < 1 or value > 30:\n                raise ValueError(f\"Invalid day '{value}'. Please use a value between 1 and 30.\")\n        elif month == 2:\n            if value < 1 or value > 29:\n                raise ValueError(f\"Invalid day '{value}'. Please use a value between 1 and 29.\")\n        return value\n\n    @field_validator(\"hour\")\n    def validate_hour(cls, value):\n        if value is None:\n            return None\n        if value < 0 or value > 23:\n            raise ValueError(f\"Invalid hour '{value}'. Please use a value between 0 and 23.\")\n        return value\n\n    @field_validator(\"minute\")\n    def validate_minute(cls, value):\n        if value is None:\n            return None\n        if value < 0 or value > 59:\n            raise ValueError(f\"Invalid minute '{value}'. Please use a value between 0 and 59.\")\n        return value\n\n    @field_validator(\"year\")\n    def validate_year(cls, value):\n        if value is None:\n            return None\n        if value < 1800 or value > 2100:\n            raise ValueError(f\"Invalid year '{value}'. Please use a value between 1800 and 2300.\")\n        return value\n\n    @field_validator(\"nation\")\n    def validate_nation(cls, value):\n        if not value:\n            return \"null\"\n\n        if len(value) != 2 or not value.isalpha():  # Esattamente 2 lettere\n            raise ValueError(\n                f\"Invalid nation code: '{value}'. It must be a 2-letter country code following the ISO 3166-1 alpha-2 standard.\"\n            )\n\n        return value\n\n    @model_validator(mode=\"after\")\n    def check_lat_lng_tz_or_geonames(self):\n        lat = self.latitude\n        lng = self.longitude\n        tz = self.timezone\n        geonames = self.geonames_username\n\n        # If latitude, longitude, and timezone are all missing, geonames_username must be provided\n        if lat is None and lng is None and tz is None:\n            if not geonames:\n                raise ValueError(\"Either provide latitude, longitude, timezone or specify geonames_username.\")\n\n        # If any one of latitude, longitude, or timezone is missing (but not all), either fill them all or use geonames_username\n        missing_fields = sum(1 for f in [lat, lng, tz] if f is None)\n        if 0 < missing_fields < 3 and not geonames:\n            raise ValueError(\"Please provide all missing fields (latitude, longitude, timezone) or specify geonames_username.\")\n\n        if geonames and (lat or lng or tz):\n            self.latitude = None\n            self.longitude = None\n            self.timezone = None\n\n        return self\n\nclass SubjectModel(AbstractBaseSubjectModel):\n    \"\"\"\n    The request model for the Birth Chart endpoint.\n    \"\"\"\n\n    name: str = Field(description=\"The name of the person to get the Birth Chart for.\", examples=[\"John Doe\"])\n    zodiac_type: Optional[ZodiacType] = Field(default=\"Tropic\", description=\"The type of zodiac used (Tropic or Sidereal).\", examples=list(get_args(ZodiacType)))\n    sidereal_mode: Union[SiderealMode, None] = Field(default=None, description=\"The sidereal mode used.\", examples=[None])\n    perspective_type: Union[PerspectiveType, None] = Field(default=\"Apparent Geocentric\", description=\"The perspective type used.\", examples=list(get_args(PerspectiveType)))\n    houses_system_identifier: Union[HousesSystemIdentifier, None] = Field(\n        default=\"P\",\n        examples=['P'],\n        description=(\n            \"The house system to use. The following are the available house systems: \"\n            \"A = equal \"\n            \"B = Alcabitius \"\n            \"C = Campanus \"\n            \"D = equal (MC) \"\n            \"F = Carter poli-equ. \"\n            \"H = horizon/azimut \"\n            \"I = Sunshine \"\n            \"i = Sunshine/alt. \"\n            \"K = Koch \"\n            \"L = Pullen SD \"\n            \"M = Morinus \"\n            \"N = equal/1=Aries \"\n            \"O = Porphyry \"\n            \"P = Placidus \"\n            \"Q = Pullen SR \"\n            \"R = Regiomontanus \"\n            \"S = Sripati \"\n            \"T = Polich/Page \"\n            \"U = Krusinski-Pisa-Goelzer \"\n            \"V = equal/Vehlow \"\n            \"W = equal/whole sign \"\n            \"X = axial rotation system/Meridian houses \"\n            \"Y = APC houses \"\n            \"Usually the standard is Placidus (P)\"\n        )\n    )\n\n    @field_validator(\"zodiac_type\")\n    def validate_zodiac_type(cls, value, info):\n        if info.data.get('sidereal_mode') and value != \"Sidereal\":\n            raise ValueError(f\"Invalid zodiac_type '{value}'. Please use 'Sidereal' when sidereal_mode is set.\")\n        return value\n\n    @field_validator(\"sidereal_mode\")\n    def validate_sidereal_mode(cls, value, info):\n        # If sidereal mode is set, zodiac type must be Sidereal\n        if value and info.data.get('zodiac_type') != \"Sidereal\":\n            raise ValueError(f\"Invalid sidereal_mode '{value}'. Please use 'Sidereal' as zodiac_type when sidereal_mode is set. If you want to use the default sidereal mode, do not set this field or set it to None.\")\n        return value\n\n    @field_validator(\"perspective_type\")\n    def validate_perspective_type(cls, value, info):\n        # If it's none, set it to the default value\n        if not value:\n            return \"Apparent Geocentric\"\n        return value\n\n    @field_validator(\"houses_system_identifier\")\n    def validate_houses_system_identifier(cls, value, info):\n        # If it's none, set it to the default value\n        if not value:\n            return \"P\"\n        return value\n\nclass TransitSubjectModel(AbstractBaseSubjectModel):\n    ...\n\nclass BirthChartRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Birth Chart endpoint.\n    \"\"\"\n\n    subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    theme: Optional[KerykeionChartTheme] = Field(default=\"classic\", description=\"The theme of the chart.\", examples=[\"classic\", \"light\", \"dark\", \"dark-high-contrast\"])\n    language: Optional[KerykeionChartLanguage] = Field(default=\"EN\", description=\"The language of the chart.\", examples=list(get_args(KerykeionChartLanguage)))\n    wheel_only: Optional[bool] = Field(default=False, description=\"If set to True, only the zodiac wheel will be returned. No additional information will be displayed.\")\n    active_points: Optional[list[Union[Planet, AxialCusps]]] = Field(default=DEFAULT_ACTIVE_POINTS, description=\"The active points to display in the chart.\", examples=[DEFAULT_ACTIVE_POINTS])\n    active_aspects: Optional[list[ActiveAspect]] = Field(default=DEFAULT_ACTIVE_ASPECTS, description=\"The active aspects to display in the chart.\", examples=[DEFAULT_ACTIVE_ASPECTS])\n\nclass SynastryChartRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Synastry Chart endpoint.\n    \"\"\"\n\n    first_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    second_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    theme: Optional[KerykeionChartTheme] = Field(default=\"classic\", description=\"The theme of the chart.\", examples=[\"classic\", \"light\", \"dark\", \"dark-high-contrast\"])\n    language: Optional[KerykeionChartLanguage] = Field(default=\"EN\", description=\"The language of the chart.\", examples=list(get_args(KerykeionChartLanguage)))\n    wheel_only: Optional[bool] = Field(default=False, description=\"If set to True, only the zodiac wheel will be returned. No additional information will be displayed.\")\n    active_points: Optional[list[Union[Planet, AxialCusps]]] = Field(default=DEFAULT_ACTIVE_POINTS, description=\"The active points to display in the chart.\", examples=[DEFAULT_ACTIVE_POINTS])\n    active_aspects: Optional[list[ActiveAspect]] = Field(default=DEFAULT_ACTIVE_ASPECTS, description=\"The active aspects to display in the chart.\", examples=[DEFAULT_ACTIVE_ASPECTS])\n\nclass TransitChartRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Transit Chart endpoint.\n    \"\"\"\n\n    first_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    transit_subject: TransitSubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    theme: Optional[KerykeionChartTheme] = Field(default=\"classic\", description=\"The theme of the chart.\", examples=[\"classic\", \"light\", \"dark\", \"dark-high-contrast\"])\n    language: Optional[KerykeionChartLanguage] = Field(default=\"EN\", description=\"The language of the chart.\", examples=list(get_args(KerykeionChartLanguage)))\n    wheel_only: Optional[bool] = Field(default=False, description=\"If set to True, only the zodiac wheel will be returned. No additional information will be displayed.\")\n    active_points: Optional[list[Union[Planet, AxialCusps]]] = Field(default=DEFAULT_ACTIVE_POINTS, description=\"The active points to display in the chart.\", examples=[DEFAULT_ACTIVE_POINTS])\n    active_aspects: Optional[list[ActiveAspect]] = Field(default=DEFAULT_ACTIVE_ASPECTS, description=\"The active aspects to display in the chart.\", examples=[DEFAULT_ACTIVE_ASPECTS])\n\nclass BirthDataRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Birth Data endpoint.\n    \"\"\"\n\n    subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n\n\nclass RelationshipScoreRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Relationship Score endpoint.\n    \"\"\"\n\n    first_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    second_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n\n\nclass SynastryAspectsRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Aspects endpoint.\n    \"\"\"\n\n    first_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    second_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    active_points: Optional[list[Union[Planet, AxialCusps]]] = Field(default=DEFAULT_ACTIVE_POINTS, description=\"The active points to display in the chart.\", examples=[DEFAULT_ACTIVE_POINTS])\n    active_aspects: Optional[list[ActiveAspect]] = Field(default=DEFAULT_ACTIVE_ASPECTS, description=\"The active aspects to display in the chart.\", examples=[DEFAULT_ACTIVE_ASPECTS])\n\nclass NatalAspectsRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Birth Data endpoint.\n    \"\"\"\n\n    subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    active_points: Optional[list[Union[Planet, AxialCusps]]] = Field(default=DEFAULT_ACTIVE_POINTS, description=\"The active points to display in the chart.\", examples=[DEFAULT_ACTIVE_POINTS])\n    active_aspects: Optional[list[ActiveAspect]] = Field(default=DEFAULT_ACTIVE_ASPECTS, description=\"The active aspects to display in the chart.\", examples=[DEFAULT_ACTIVE_ASPECTS])\n\n\nclass CompositeChartRequestModel(BaseModel):\n    \"\"\"\n    The request model for the Synastry Chart endpoint.\n    \"\"\"\n\n    first_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    second_subject: SubjectModel = Field(description=\"The name of the person to get the Birth Chart for.\")\n    theme: Optional[KerykeionChartTheme] = Field(default=\"classic\", description=\"The theme of the chart.\", examples=[\"classic\", \"light\", \"dark\", \"dark-high-contrast\"])\n    language: Optional[KerykeionChartLanguage] = Field(default=\"EN\", description=\"The language of the chart.\", examples=list(get_args(KerykeionChartLanguage)))\n    wheel_only: Optional[bool] = Field(default=False, description=\"If set to True, only the zodiac wheel will be returned. No additional information will be displayed.\")\n    active_points: Optional[list[Union[Planet, AxialCusps]]] = Field(default=DEFAULT_ACTIVE_POINTS, description=\"The active points to display in the chart.\", examples=[DEFAULT_ACTIVE_POINTS])\n    active_aspects: Optional[list[ActiveAspect]] = Field(default=DEFAULT_ACTIVE_ASPECTS, description=\"The active aspects to display in the chart.\", examples=[DEFAULT_ACTIVE_ASPECTS])\n","size_bytes":15348},"app/types/response_models.py":{"content":"from pydantic import BaseModel, Field\n\nfrom kerykeion.kr_types import LunarPhaseModel, AstrologicalSubjectModel, CompositeSubjectModel\nfrom kerykeion.kr_types import Quality, Element, Sign, Houses, Planet, AxialCusps, AspectName, SignsEmoji, SignNumbers, PointType, ZodiacType\nfrom typing import Optional\n\n\nclass AspectModel(BaseModel):\n    \"\"\"\n    The model for the aspects, similar to the one in the Kerykeion library.\n    \"\"\"\n    p1_name: Planet | AxialCusps = Field(description=\"The name of the first planet.\")\n    p1_abs_pos: float = Field(description=\"The absolute position of the first planet.\")\n    p2_name: Planet | AxialCusps = Field(description=\"The name of the second planet.\")\n    p2_abs_pos: float = Field(description=\"The absolute position of the second planet.\")\n    aspect: AspectName = Field(description=\"The aspect between the two planets.\")\n    orbit: float = Field(description=\"The orbit between the two planets.\")\n    aspect_degrees: float = Field(description=\"The degrees of the aspect.\")\n    diff: float = Field(description=\"The difference between the two planets.\")\n    p1: int = Field(description=\"The id of the first planet.\")\n    p2: int = Field(description=\"The id of the second planet.\")\n\n\nclass PlanetModel(BaseModel):\n    \"\"\"\n    The model for the planets, similar to the one in the Kerykeion library.\n    \"\"\"\n\n    name: Planet | AxialCusps = Field(description=\"The name of the planet.\")\n    quality: Quality = Field(description=\"The quality of the planet.\")\n    element: Element = Field(description=\"The element of the planet.\")\n    sign: Sign = Field(description=\"The sign in which the planet is located.\")\n    sign_num: SignNumbers = Field(description=\"The number of the sign in which the planet is located.\")\n    position: float = Field(description=\"The position of the planet inside the sign.\")\n    abs_pos: float = Field(description=\"The absolute position of the planet in the 360 degrees circle of the zodiac.\")\n    emoji: SignsEmoji = Field(description=\"The emoji of the sign in which the planet is located.\")\n    point_type: PointType = Field(description=\"The type of the point.\")\n    house: Optional[Houses] = Field(description=\"The house in which the planet is located.\")\n    retrograde: Optional[bool] = Field(default=None, description=\"The retrograde status of the planet.\")\n\n\nclass BirthDataModel(BaseModel):\n    \"\"\"\n    The model for the birth data.\n    \"\"\"\n\n    name: str = Field(description=\"The name of the subject.\")\n    year: int = Field(description=\"Year of birth.\")\n    month: int = Field(description=\"Month of birth.\")\n    day: int = Field(description=\"Day of birth.\")\n    hour: int = Field(description=\"Hour of birth.\")\n    minute: int = Field(description=\"Minute of birth.\")\n    city: str = Field(description=\"City of birth.\")\n    nation: str = Field(description=\"Nation of birth.\")\n    lng: float = Field(description=\"Longitude of birth.\")\n    lat: float = Field(description=\"Latitude of birth.\")\n    tz_str: str = Field(description=\"Timezone of birth.\")\n    zodiac_type: ZodiacType = Field(description=\"The type of zodiac used.\")\n    local_time: str = Field(description=\"The local time of birth.\")\n    utc_time: str = Field(description=\"The UTC time of birth.\")\n    julian_day: float = Field(description=\"The Julian day of birth.\")\n\n    # Planets\n    sun: PlanetModel = Field(description=\"The data of the Sun.\")\n    moon: PlanetModel = Field(description=\"The data of the Moon.\")\n    mercury: PlanetModel = Field(description=\"The data of Mercury.\")\n    venus: PlanetModel = Field(description=\"The data of Venus.\")\n    mars: PlanetModel = Field(description=\"The data of Mars.\")\n    jupiter: PlanetModel = Field(description=\"The data of Jupiter.\")\n    saturn: PlanetModel = Field(description=\"The data of Saturn.\")\n    uranus: PlanetModel = Field(description=\"The data of Uranus.\")\n    neptune: PlanetModel = Field(description=\"The data of Neptune.\")\n    pluto: PlanetModel = Field(description=\"The data of Pluto.\")\n    chiron: PlanetModel = Field(description=\"The data of Chiron.\")\n\n    # Axial Cusps\n    asc: PlanetModel = Field(description=\"The data of the ascendant.\")\n    dsc: PlanetModel = Field(description=\"The data of the descendant.\")\n    mc: PlanetModel = Field(description=\"The data of the midheaven.\")\n    ic: PlanetModel = Field(description=\"The data of the imum coeli.\")\n    \n    # Houses\n    first_house: PlanetModel = Field(description=\"The data of the first house.\")\n    second_house: PlanetModel = Field(description=\"The data of the second house.\")\n    third_house: PlanetModel = Field(description=\"The data of the third house.\")\n    fourth_house: PlanetModel = Field(description=\"The data of the fourth house.\")\n    fifth_house: PlanetModel = Field(description=\"The data of the fifth house.\")\n    sixth_house: PlanetModel = Field(description=\"The data of the sixth house.\")\n    seventh_house: PlanetModel = Field(description=\"The data of the seventh house.\")\n    eighth_house: PlanetModel = Field(description=\"The data of the eighth house.\")\n    ninth_house: PlanetModel = Field(description=\"The data of the ninth house.\")\n    tenth_house: PlanetModel = Field(description=\"The data of the tenth house.\")\n    eleventh_house: PlanetModel = Field(description=\"The data of the eleventh house.\")\n    twelfth_house: PlanetModel = Field(description=\"The data of the twelfth house.\")\n\n    # Nodes\n    mean_node: PlanetModel = Field(description=\"The data of the mean node.\")\n    true_node: PlanetModel = Field(description=\"The data of the true node.\")\n\n    # Lunar Phase\n    lunar_phase: Optional[LunarPhaseModel] = Field(description=\"The lunar phase of the subject.\")\n\n\nclass BirthDataResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Birth Data endpoint.\n    \"\"\"\n    status: str = Field(description=\"The status of the response.\")\n    data: BirthDataModel = Field(description=\"The data of the subject.\")\n\n\nclass BirthChartResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Birth Chart endpoint.\n    \"\"\"\n    status: str = Field(description=\"The status of the response.\")\n    data: BirthDataModel = Field(description=\"The data of the subject.\")\n    chart: str = Field(description=\"The SVG chart of the birth chart.\")\n    aspects: list[AspectModel] = Field(description=\"The aspects of the birth chart.\")\n\n\nclass DoubleDataModel(BaseModel):\n    \"\"\"\n    The model for the data of two subjects.\n    \"\"\"\n    first_subject: AstrologicalSubjectModel = Field(description=\"The data of the first subject.\")\n    second_subject: AstrologicalSubjectModel = Field(description=\"The data of the second subject.\")\n\n\nclass TransitDataModel(BaseModel):\n    \"\"\"\n    The model for the data of two subjects.\n    \"\"\"\n    first_subject: AstrologicalSubjectModel = Field(description=\"The data of the first subject.\")\n    transit: AstrologicalSubjectModel = Field(description=\"The data of the second subject.\")\n\n\nclass CompositeDataModel(BaseModel):\n    \"\"\"\n    The model for the data of the composite chart.\n    \"\"\"\n    composite_subject: CompositeSubjectModel = Field(description=\"The data of the composite chart.\")\n    first_subject: AstrologicalSubjectModel = Field(description=\"The data of the first subject.\")\n    second_subject: AstrologicalSubjectModel = Field(description=\"The data of the second subject.\")\n\n\nclass SynastryChartResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Synastry.\n    \"\"\"\n    status: str = Field(description=\"The status of the response.\")\n    data: DoubleDataModel = Field(description=\"The data of the two subjects.\")\n    chart: str = Field(description=\"The SVG chart of the synastry.\")\n    aspects: list[AspectModel] = Field(description=\"The aspects between the two subjects.\")\n\n\nclass TransitChartResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Transit.\n    \"\"\"\n    status: str = Field(description=\"The status of the response.\")\n    data: TransitDataModel = Field(description=\"The data of the two subjects.\")\n    chart: str = Field(description=\"The SVG chart of the transit.\")\n    aspects: list[AspectModel] = Field(description=\"The aspects between the two subjects.\")\n\n\nclass TransitAspectsResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Transit Data endpoint.\n    \"\"\"\n    status: str = Field(description=\"The status of the response.\")\n    data: TransitDataModel = Field(description=\"The data of the two subjects.\")\n    aspects: list[AspectModel] = Field(description=\"The aspects between the two subjects.\")\n\n\nclass RelationshipScoreResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Relationship Score endpoint.\n    \"\"\"\n\n    status: str = Field(description=\"The status of the response.\")\n    data: DoubleDataModel = Field(description=\"The data of the two subjects.\")\n    score: float = Field(description=\"The relationship score between the two subjects.\")\n    aspects: list[AspectModel] = Field(description=\"The aspects between the two subjects. In the Kerykeion library is referred as 'relevant_aspects'.\")\n    is_destiny_sign: bool = Field(description=\"If the two sings are reciprocally destiny signs.\")\n\n\nclass SynastryAspectsResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Aspects endpoint.\n    \"\"\"\n\n    status: str = Field(description=\"The status of the response.\")\n    data: DoubleDataModel = Field(description=\"The data of the two subjects.\")\n    aspects: list[AspectModel] = Field(description=\"A list with the aspects between the two subjects.\")\n\n\nclass CompositeChartResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Composite Chart endpoint.\n    \"\"\"\n\n    status: str = Field(description=\"The status of the response.\")\n    data: CompositeDataModel = Field(description=\"The data of the subjects and the composite chart.\")\n    chart: str = Field(description=\"The SVG chart of the composite chart.\")\n    aspects: list[AspectModel] = Field(description=\"The aspects between the two subjects.\")\n\n\nclass CompositeAspectsResponseModel(BaseModel):\n    \"\"\"\n    The response model for the Composite Aspects endpoint.\n    \"\"\"\n\n    status: str = Field(description=\"The status of the response.\")\n    data: CompositeDataModel = Field(description=\"The data of the subjects and the composite chart.\")\n    aspects: list[AspectModel] = Field(description=\"A list with the aspects between the two subjects.\")","size_bytes":10297},"app/utils/get_ntp_time.py":{"content":"import socket\nimport struct\nfrom typing import Union\nfrom datetime import datetime, timezone\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\ndef get_ntp_time(server: str = \"time.google.com\", timeout: int = 5) -> Union[datetime, Exception]:\n    \"\"\"\n    Gets the current time from an NTP server.\n    \n    Args:\n        server: The NTP server to use (default: time.google.com)\n        timeout: The connection timeout in seconds (default: 5)\n    \n    Returns:\n        A datetime object in UTC timezone representing the current time or raises an exception\n    \"\"\"\n    NTP_PORT = 123\n    # RFC 4330 format - Mode: 3 (client), Version: 3\n    NTP_PACKET = b'\\x1b' + 47 * b'\\0'\n    \n    try:\n        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as sock:\n            sock.settimeout(timeout)\n            sock.sendto(NTP_PACKET, (server, NTP_PORT))\n            data, _ = sock.recvfrom(48)\n            \n            # Extract the timestamp (second field Transmit Timestamp)\n            # RFC 4330: bytes 40-47 contain the Transmit Timestamp\n            transmit_time = struct.unpack('!II', data[40:48])\n            \n            # The first value represents seconds since 1900-01-01\n            ntp_seconds = transmit_time[0]\n            \n            # Convert from NTP epoch (1900) to Unix epoch (1970)\n            unix_time = ntp_seconds - 2208988800\n            \n            # Return a datetime object with UTC timezone\n            return datetime.fromtimestamp(unix_time, tz=timezone.utc)\n            \n    except socket.timeout as e:\n        logger.error(f\"Timeout error: {e}\")\n        raise TimeoutError(\"Timeout during NTP request\") from e\n    except Exception as e:\n        logger.error(f\"An error occurred: {e}\")\n        raise e\n\nif __name__ == \"__main__\":\n    # Example usage\n    try:\n        ntp_time = get_ntp_time()\n        print(f\"Current NTP time: {ntp_time}\")\n    except Exception as e:\n        print(f\"Failed to get NTP time: {e}\")","size_bytes":2008},"app/utils/get_time_from_google.py":{"content":"import requests\nfrom datetime import datetime\n\ndef get_time_from_google():\n    response = requests.head(\"https://www.google.com\")\n    date_header = response.headers.get(\"Date\")\n    \n    if date_header:\n        # Converti la stringa della data in un oggetto datetime\n        return datetime.strptime(date_header, \"%a, %d %b %Y %H:%M:%S GMT\")\n    else:\n        raise ValueError(\"Header 'Date' not found in the response.\")\n\nif __name__ == \"__main__\":\n    current_time = get_time_from_google()\n    print(\"Ora corrente da Google:\", current_time)","size_bytes":540},"app/utils/internal_server_error_json_response.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n\nfrom fastapi.responses import JSONResponse\n\nInternalServerErrorJsonResponse = JSONResponse(\n    status_code=500,\n    content={\n        \"message\": \"Internal Server Error\",\n        \"status\": \"KO\",\n    },\n)\n","size_bytes":275},"app/utils/write_request_to_log.py":{"content":"\"\"\"\n    This is part of Astrologer API (C) 2023 Giacomo Battaglia\n\"\"\"\n\nfrom logging import Logger\nfrom fastapi import Request\n\n\ndef get_write_request_to_log(logger: Logger):\n    def write_request_to_log(level, request: Request, message: str | Exception):\n        logger.log(level, f\"{str(request.url)}: {str(message)}\")\n\n    return write_request_to_log\n","size_bytes":353}},"version":1}